<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HQP的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="ayjcsgm.github.io/"/>
  <updated>2019-10-02T11:54:57.009Z</updated>
  <id>ayjcsgm.github.io/</id>
  
  <author>
    <name>Huangqiuping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LinkedList类</title>
    <link href="ayjcsgm.github.io/2019/10/02/LinkedList%E7%B1%BB/"/>
    <id>ayjcsgm.github.io/2019/10/02/LinkedList类/</id>
    <published>2019-10-02T11:15:32.000Z</published>
    <updated>2019-10-02T11:54:57.009Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picsum.photos/800/204" alt></p><article class="_2rhmJa"><h2>链表</h2><p>LinkedList是基于链表结构的一种List，在分析LinkedList源码前有必要对链表结构进行说明。</p><h3>链表的概念</h3><p>链表是由一系列非连续的节点组成的存储结构，简单分下类的话，链表又分为单向链表和双向链表，而单向/双向链表又可以分为循环链表和非循环链表，下面简单就这四种链表进行图解说明。</p><a id="more"></a><ol><li>单向链表<br>单向链表就是通过每个结点的指针指向下一个结点从而链接起来的结构，最后一个节点的next指向null。</li></ol><div class="image-package"><div class="image-container" style="max-width: 673px; max-height: 184px; background-color: transparent;"><div class="image-container-fill" style="padding-bottom: 27.339999999999996%;"></div><div class="image-view" data-width="673" data-height="184"><img data-original-src="//upload-images.jianshu.io/upload_images/1637925-274d3d7c405bb61a.jpg" data-original-width="673" data-original-height="184" data-original-format data-original-filesize="31061" data-image-index="0" class style="cursor: zoom-in;" src="//upload-images.jianshu.io/upload_images/1637925-274d3d7c405bb61a.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/673/format/webp"></div></div><div class="image-caption">image</div></div><ol start="2"><li>单向循环链表<br>单向循环链表和单向列表的不同是，最后一个节点的next不是指向null，而是指向head节点，形成一个“环”。</li></ol><div class="image-package"><div class="image-container" style="max-width: 571px; max-height: 182px; background-color: transparent;"><div class="image-container-fill" style="padding-bottom: 31.869999999999997%;"></div><div class="image-view" data-width="571" data-height="182"><img data-original-src="//upload-images.jianshu.io/upload_images/1637925-23545a76f376b2a1.jpg" data-original-width="571" data-original-height="182" data-original-format data-original-filesize="27226" data-image-index="1" class style="cursor: zoom-in;" src="//upload-images.jianshu.io/upload_images/1637925-23545a76f376b2a1.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/571/format/webp"></div></div><div class="image-caption">image</div></div><ol start="3"><li>双向链表<br>从名字就可以看出，双向链表是包含两个指针的，pre指向前一个节点，next指向后一个节点，但是第一个节点head的pre指向null，最后一个节点的tail指向null。</li></ol><div class="image-package"><div class="image-container" style="max-width: 700px; max-height: 200px;"><div class="image-container-fill" style="padding-bottom: 24.18%;"></div><div class="image-view" data-width="827" data-height="200"><img data-original-src="//upload-images.jianshu.io/upload_images/1637925-a59ecc72b5ff1454.jpg" data-original-width="827" data-original-height="200" data-original-format data-original-filesize="41274" data-image-index="2" class="image-loading" style="cursor: zoom-in;"></div></div><div class="image-caption">image</div></div><ol start="4"><li>双向循环链表<br>双向循环链表和双向链表的不同在于，第一个节点的pre指向最后一个节点，最后一个节点的next指向第一个节点，也形成一个“环”。<strong>而LinkedList就是基于双向循环链表设计的。</strong></li></ol><div class="image-package"><div class="image-container" style="max-width: 631px; max-height: 238px;"><div class="image-container-fill" style="padding-bottom: 37.72%;"></div><div class="image-view" data-width="631" data-height="238"><img data-original-src="//upload-images.jianshu.io/upload_images/1637925-b8f6256cf8cbc624.jpg" data-original-width="631" data-original-height="238" data-original-format data-original-filesize="38625" data-image-index="3" class="image-loading" style="cursor: zoom-in;"></div></div><div class="image-caption">image</div></div><h2>LinkedList简介</h2><h3>LinkedList定义</h3><pre class="line-numbers  language-cpp"><code class="  language-cpp">public class LinkedList&lt;E&gt;    extends AbstractSequentialList&lt;E&gt;    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable<p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>LinkedList 是一个继承于AbstractSequentialList的<strong>双向循环链表</strong>。它也可以被当作堆栈、队列或双端队列进行操作。<br>LinkedList 实现 List 接口，能对它进行队列操作。<br>LinkedList 实现 Deque 接口，即能将LinkedList当作双端队列使用。<br>LinkedList 实现了Cloneable接口，即覆盖了函数clone()，能克隆。<br>LinkedList 实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输。<br>LinkedList 是非同步的。</p><h3>LinkedList属性</h3><pre class="line-numbers  language-java"><code class="  language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></p></code></pre><p></p><p>LinkedList中提供了两个属性，其中size和ArrayList中一样用来计数，表示list的元素数量，而header则是链表的头结点，Entry则是链表的节点对象。</p><pre class="line-numbers  language-cpp"><code class="  language-cpp">private static class Entry&lt;E&gt; {    E element;  // 当前存储元素    Entry&lt;E&gt; next;  // 下一个元素节点    Entry&lt;E&gt; previous;  // 上一个元素节点    Entry(E element, Entry&lt;E&gt; next, Entry&lt;E&gt; previous) {        this.element = element;        this.next = next;        this.previous = previous;    }}<p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>Entry为LinkedList 的内部类，其中定义了当前存储的元素，以及该元素的上一个元素和下一个元素。</p><h3>LinkedList构造函数</h3><pre class="line-numbers  language-cpp"><code class="  language-cpp">/*** 构造一个空的LinkedList .*/public LinkedList() {    //将header节点的前一节点和后一节点都设置为自身    header.next = header. previous = header ;}<p>/**</p><ul><li>构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列</li><li>/<br>public LinkedList(Collection&lt;? extends E&gt; c) {<br>   this();<br>   addAll(c);<br>}</li></ul><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>需要注意的是空的LinkedList构造方法，它将header节点的前一节点和后一节点都设置为自身，这里便说明LinkedList 是一个双向循环链表，如果只是单纯的双向链表而不是循环链表，他的实现应该是这样的：</p><pre class="line-numbers  language-csharp"><code class="  language-csharp"><span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    header<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span> previous <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>非循环链表的情况应该是header节点的前一节点和后一节点均为null（参见链表图解）。</p><h2>LinkedList源码解析(基于JDK1.6.0_45)</h2><h3>增加</h3><pre class="line-numbers  language-csharp"><code class="  language-csharp"><span class="token comment">/** * 将一个元素添加至list尾部 */</span><span class="token keyword">public</span> boolean <span class="token keyword">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 在header前添加元素e，header前就是最后一个结点啦，就是在最后一个结点的后面添加元素e</span>   <span class="token function">addBefore</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 在指定位置添加元素 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果index等于list元素个数，则在队尾添加元素(header之前)，否则在index节点前添加元素</span>    <span class="token function">addBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">(</span>index<span class="token operator">==</span> size <span class="token punctuation">?</span> header <span class="token punctuation">:</span> <span class="token function">entry</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><p><span class="token keyword">private</span> Entry<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> <span class="token function">addBefore</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> Entry<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> entry<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token comment">// 用entry创建一个要添加的新节点，next为entry，previous为entry.previous，意思就是新节点插入entry前面，确定自身的前后引用，</span><br>    Entry<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> newEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span><br>     <span class="token comment">// 下面修改newEntry的前后节点的引用，确保其链表的引用关系是正确的</span><br>    <span class="token comment">// 将上一个节点的next指向自己</span><br>    newEntry<span class="token punctuation">.</span> previous<span class="token punctuation">.</span>next <span class="token operator">=</span> newEntry<span class="token punctuation">;</span><br>    <span class="token comment">// 将下一个节点的previous指向自己</span><br>    newEntry<span class="token punctuation">.</span> next<span class="token punctuation">.</span>previous <span class="token operator">=</span> newEntry<span class="token punctuation">;</span><br>    <span class="token comment">// 计数+1</span><br>     size<span class="token operator">++</span><span class="token punctuation">;</span><br>     modCount<span class="token operator">++</span><span class="token punctuation">;</span><br>     <span class="token keyword">return</span> newEntry<span class="token punctuation">;</span><br><span class="token punctuation">}</span></p><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>到这里可以发现一点疑虑，<strong>header作为双向循环链表的头结点是不保存数据的，也就是说hedaer中的element永远等于null</strong>。</p><pre class="line-numbers  language-cpp"><code class="  language-cpp">/** * 添加一个集合元素到list中 */public boolean addAll(Collection&lt;? extends E&gt; c) {        // 将集合元素添加到list最后的尾部    return addAll(size , c);}<p>/**</p><ul><li><p>在指定位置添加一个集合元素到list中</p></li><li><p>/<br>public boolean addAll(int index, Collection&lt;? extends E&gt; c) {<br>  // 越界检查<br>  if (index &lt; 0 || index &gt; size)</p><pre><code>throw new IndexOutOfBoundsException( &quot;Index: &quot;+index+                                    &quot;, Size: &quot;+size );</code></pre><p>  Object[] a = c.toArray();<br>  // 要插入元素的个数<br>  int numNew = a.length ;<br>  if (numNew==0)</p><pre><code>return false;</code></pre><p>  modCount++;</p><p>  // 找出要插入元素的前后节点<br>  // 获取要插入index位置的下一个节点，如果index正好是lsit尾部的位置那么下一个节点就是header，否则需要查找index位置的节点<br>  Entry&lt;E&gt; successor = (index== size ? header : entry(index));<br>  // 获取要插入index位置的上一个节点，因为是插入，所以上一个点击就是未插入前下一个节点的上一个<br>  Entry&lt;E&gt; predecessor = successor. previous;<br>  // 循环插入<br>  for (int i=0; i&lt;numNew; i++) {</p><pre><code>// 构造一个节点，确认自身的前后引用Entry&amp;lt;E&amp;gt; e = new Entry&amp;lt;E&amp;gt;((E)a[i], successor, predecessor);// 将插入位置上一个节点的下一个元素引用指向当前元素（这里不修改下一个节点的上一个元素引用，是因为下一个节点随着循环一直在变）predecessor. next = e;// 最后修改插入位置的上一个节点为自身，这里主要是为了下次遍历后续元素插入在当前节点的后面，确保这些元素本身的顺序predecessor = e;</code></pre><p>  }<br>  // 遍历完所有元素，最后修改下一个节点的上一个元素引用为遍历的最后一个元素<br>  successor. previous = predecessor;</p><p>  // 修改计数器<br>  size += numNew;<br>  return true;<br>}</p></li></ul><p><span aria-hidden="true" class="line-numbers-rows"></span></p></code></pre><p></p><div class="image-package"><div class="image-container" style="max-width: 700px; max-height: 477px;"><div class="image-container-fill" style="padding-bottom: 64.37%;"></div><div class="image-view" data-width="741" data-height="477"><img data-original-src="//upload-images.jianshu.io/upload_images/1637925-88562866d3134a9f.jpg" data-original-width="741" data-original-height="477" data-original-format data-original-filesize="91069" data-image-index="4" class="image-loading" style="cursor: zoom-in;"></div></div><div class="image-caption">image</div></div><p>增加方法的代码理解起来可能有些困难，但是只要理解了双向链表的存储结构，掌握增加的核心逻辑就可以了，这里总结一下往链表中增加元素的核心逻辑：1.将元素转换为链表节点，2.增加该节点的前后引用（即pre和next分别指向哪一个节点），3.前后节点对该节点的引用（前节点的next指向该节点，后节点的pre指向该节点）。现在再看下就这么简单么，就是<strong>改变前后的互相指向关系</strong>（看图增加元素前后的变化）。</p><p>删除也是一样的，下面看看删除方法的实现。</p><h3>删除</h3><pre class="line-numbers  language-csharp"><code class="  language-csharp"><span class="token comment">/** * 删除第一个匹配的指定元素 */</span><span class="token keyword">public</span> boolean <span class="token keyword">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 遍历链表找到要被删除的节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> e <span class="token operator">=</span> header <span class="token punctuation">.</span>next<span class="token punctuation">;</span> e <span class="token operator">!=</span> header<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>element <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> e <span class="token operator">=</span> header <span class="token punctuation">.</span>next<span class="token punctuation">;</span> e <span class="token operator">!=</span> header<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>element <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><p><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token keyword">remove</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> header <span class="token punctuation">)</span><br>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></p><p>   <span class="token comment">// 被删除的元素，供返回</span><br>    <span class="token class-name">E</span> result <span class="token operator">=</span> e<span class="token punctuation">.</span> element<span class="token punctuation">;</span><br>   <span class="token comment">// 下面修正前后对该节点的引用</span><br>   <span class="token comment">// 将该节点的上一个节点的next指向该节点的下一个节点</span><br>   e<span class="token punctuation">.</span> previous<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span><br>   <span class="token comment">// 将该节点的下一个节点的previous指向该节点的上一个节点</span><br>   e<span class="token punctuation">.</span> next<span class="token punctuation">.</span>previous <span class="token operator">=</span> e<span class="token punctuation">.</span>previous<span class="token punctuation">;</span><br>   <span class="token comment">// 修正该节点自身的前后引用</span><br>    e<span class="token punctuation">.</span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>previous <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><br>   <span class="token comment">// 将自身置空，让gc可以尽快回收</span><br>    e<span class="token punctuation">.</span> element <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><br>   <span class="token comment">// 计数器减一</span><br>    size<span class="token operator">–</span><span class="token punctuation">;</span><br>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><br>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><br><span class="token punctuation">}</span></p><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>由于节点被删除，该节点的上一个节点和下一个节点互相拉一下小手就可以了，注意的是“互相”，不能一厢情愿。</p><h3>修改</h3><pre class="line-numbers  language-cpp"><code class="  language-cpp">/** * 修改指定位置索引位置的元素 */public E set( int index, E element) {    // 查找index位置的节点    Entry&lt;E&gt; e = entry(index);    // 取出该节点的元素，供返回使用    E oldVal = e. element;    // 用新元素替换旧元素    e. element = element;    // 返回旧元素    return oldVal;}    <p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>set方法看起来简单了很多，只要修改该节点上的元素就好了，但是不要忽略了这里的entry()方法，重点就是它。</p><h3>查询</h3><p>终于到查询了，终于发现了上面经常出现的那个方法entry()根据index查询节点，我们知道数组是有下标的，通过下标操作天然的支持根据index查询元素，而链表中是没有index概念呢，那么怎么样才能通过index查询到对应的元素呢，下面就来看看LinkedList是怎么实现的。</p><pre class="line-numbers  language-csharp"><code class="  language-csharp"><span class="token comment">/** * 查找指定索引位置的元素 */</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token keyword">get</span><span class="token punctuation">(</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">entry</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>element <span class="token punctuation">;</span><span class="token punctuation">}</span><p><span class="token comment">/**</span></p><ul><li>返回指定索引位置的节点</li><li>/<br><span class="token keyword">private</span> Entry<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> <span class="token function">entry</span><span class="token punctuation">(</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token comment">// 越界检查</span><br>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span><pre><code>&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Index: &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;index&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;                                    &lt;span class=&quot;token string&quot;&gt;&quot;, Size: &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;size &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre>  <span class="token comment">// 取出头结点</span><br>  Entry<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> e <span class="token operator">=</span> header<span class="token punctuation">;</span><br>  <span class="token comment">// size&gt;&gt;1右移一位代表除以2，这里使用简单的二分方法，判断index与list的中间位置的距离</span><br>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><pre><code>&lt;span class=&quot;token comment&quot;&gt;// 如果index距离list中间位置较近，则从头部向后遍历(next)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><pre><code>&lt;span class=&quot;token comment&quot;&gt;// 如果index距离list中间位置较远，则从头部向前遍历(previous)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    e &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; previous&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre>  <span class="token punctuation">}</span><br>  <span class="token keyword">return</span> e<span class="token punctuation">;</span><br><span class="token punctuation">}</span></li></ul><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>LinkedList是通过从header开始index计为0，然后一直往下遍历（next），直到到index位置。为了优化查询效率，LinkedList采用了<strong>二分查找</strong>（这里说的二分只是简单的一次二分），判断index与size中间位置的距离，采取从header向后还是向前查找。<br><strong>到这里我们明白，基于双向循环链表实现的LinkedList，通过索引Index的操作是低效的，index所对应的元素越靠近中间所费时间越长。而向链表两端插入和删除元素则是非常高效的（如果不是两端的话，都需要对链表进行遍历查找）。</strong></p><h3>是否包含</h3><pre class="line-numbers  language-csharp"><code class="  language-csharp"><span class="token comment">// 判断LinkedList是否包含元素(o)</span><span class="token keyword">public</span> boolean <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><p><span class="token comment">// 从前向后查找，返回“值为对象(o)的节点对应的索引”</span><br><span class="token comment">// 不存在就返回-1</span><br><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> header <span class="token punctuation">.</span>next<span class="token punctuation">;</span> e <span class="token operator">!=</span> header<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>element <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><br>                <span class="token keyword">return</span> index<span class="token punctuation">;</span><br>            index<span class="token operator">++</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> header <span class="token punctuation">.</span>next<span class="token punctuation">;</span> e <span class="token operator">!=</span> header<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>element <span class="token punctuation">)</span><span class="token punctuation">)</span><br>                <span class="token keyword">return</span> index<span class="token punctuation">;</span><br>            index<span class="token operator">++</span><span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></p><p><span class="token comment">// 从后向前查找，返回“值为对象(o)的节点对应的索引”</span><br><span class="token comment">// 不存在就返回-1</span><br><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">int</span> index <span class="token operator">=</span> size <span class="token punctuation">;</span><br>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> header <span class="token punctuation">.</span>previous<span class="token punctuation">;</span> e <span class="token operator">!=</span> header<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>previous <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            index<span class="token operator">–</span><span class="token punctuation">;</span><br>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>element <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><br>                <span class="token keyword">return</span> index<span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> header <span class="token punctuation">.</span>previous<span class="token punctuation">;</span> e <span class="token operator">!=</span> header<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>previous <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>            index<span class="token operator">–</span><span class="token punctuation">;</span><br>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>element <span class="token punctuation">)</span><span class="token punctuation">)</span><br>                <span class="token keyword">return</span> index<span class="token punctuation">;</span><br>        <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></p><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>和<strong>public</strong> <strong>boolean</strong> remove(Object o) 一样，indexOf查询元素位于容器的索引位置，都是需要对链表进行遍历操作，当然也就是低效了啦。</p><h3>判断容量</h3><pre class="line-numbers  language-java"><code class="  language-java"><span class="token comment">/** * Returns the number of elements in this list. * * @return the number of elements in this list */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> size <span class="token punctuation">;</span><span class="token punctuation">}</span><p><span class="token comment">/**</span></p><ul><li>{@inheritDoc}</li><li></li><li>&lt;p&gt;This implementation returns &lt;tt&gt;size() == 0 &lt;/tt&gt;.</li><li>/<br><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></li></ul><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>和ArrayList一样，基于计数器size操作，容量判断很方便。</p><h3>LinkedList实现的Deque双端队列</h3><pre class="line-numbers  language-java"><code class="  language-java"><span class="token comment">/** * Adds the specified element as the tail (last element) of this list. * * @param e the element to add * @return &lt;tt&gt; true&lt;/tt&gt; (as specified by {@link Queue#offer}) * @since 1.5 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><p><span class="token comment">/**</span></p><ul><li>Retrieves and removes the head (first element) of this list</li><li>@return the head of this list, or &lt;tt&gt;null &lt;/tt&gt; if this list is empty</li><li>@since 1.5</li><li>/<br><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><pre><code>&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre>  <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></li></ul><p><span class="token comment">/**</span></p><ul><li>Removes and returns the first element from this list.</li><li></li><li>@return the first element from this list</li><li>@throws NoSuchElementException if this list is empty</li><li>/<br><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token function">remove</span><span class="token punctuation">(</span>header <span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></li></ul><p><span class="token comment">/**</span></p><ul><li>Retrieves, but does not remove, the head (first element) of this list.</li><li>@return the head of this list, or &lt;tt&gt;null &lt;/tt&gt; if this list is empty</li><li>@since 1.5</li><li>/<br><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><pre><code>&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre>  <span class="token keyword">return</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></li></ul><p><span class="token comment">/**</span></p><ul><li><p>Returns the first element in this list.</p></li><li></li><li><p>@return the first element in this list</p></li><li><p>@throws NoSuchElementException if this list is empty</p></li><li><p>/<br><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span></p><pre><code>&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NoSuchElementException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;</code></pre><p>  <span class="token keyword">return</span> header <span class="token punctuation">.</span>next<span class="token punctuation">.</span> element<span class="token punctuation">;</span><br><span class="token punctuation">}</span></p></li></ul><p><span class="token comment">/**</span></p><ul><li>Pushes an element onto the stack represented by this list.  In other</li><li>words, inserts the element at the front of this list.</li><li></li><li>&lt;p&gt;This method is equivalent to {@link #addFirst}.</li><li></li><li>@param e the element to push</li><li>@since 1.6</li><li>/<br><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></li></ul><p><span class="token comment">/**</span></p><ul><li>Inserts the specified element at the beginning of this list.</li><li></li><li>@param e the element to add</li><li>/<br><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><br> <span class="token function">addBefore</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> header<span class="token punctuation">.</span>next <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></li></ul><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></p></code></pre><p></p><p>看看Deque 的实现是不是很简单，逻辑都是基于上面讲的链表操作的。</p><hr><p><strong>总结</strong>：<br>(01) LinkedList 实际上是通过双向链表去实现的。<br>它包含一个非常重要的内部类：<strong>Entry</strong>。Entry是<strong>双向链表节点所对应的数据结构</strong>，它包括的属性有：<strong>当前节点所包含的值</strong>，<strong>上一个节点</strong>，<strong>下一个节点</strong>。<br>(02) 从LinkedList的实现方式中可以发现，它不存在LinkedList容量不足的问题。<br>(03) LinkedList的克隆函数，即是将全部元素克隆到一个新的LinkedList对象中。<br>(04) LinkedList实现java.io.Serializable。当写入到输出流时，先写入“容量”，再依次写入“每一个节点保护的值”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。<br>(05) 由于LinkedList实现了Deque，而Deque接口定义了在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（null 或 false，具体取决于操作）。</p><h3>对LinkedList以及ArrayList的迭代效率比较</h3><p><strong>结论：ArrayList使用最普通的for循环遍历比较快，LinkedList使用foreach循环比较快。</strong></p><p>看一下两个List的定义：</p><pre class="line-numbers  language-java"><code class="  language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></p></code></pre><p></p><pre class="line-numbers  language-cpp"><code class="  language-cpp">public class LinkedList&lt;E&gt;    extends AbstractSequentialList&lt;E&gt;    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意到ArrayList是实现了RandomAccess接口而LinkedList则没有实现这个接口，关于RandomAccess这个接口的作用，看一下JDK API上的说法：</p><div class="image-package"><div class="image-container" style="max-width: 700px; max-height: 346px;"><div class="image-container-fill" style="padding-bottom: 32.61%;"></div><div class="image-view" data-width="1061" data-height="346"><img data-original-src="//upload-images.jianshu.io/upload_images/1637925-621f021a2d057af6.png" data-original-width="1061" data-original-height="346" data-original-format data-original-filesize="20711" data-image-index="5" class="image-loading" style="cursor: zoom-in;"></div></div><div class="image-caption">image</div></div><h1>总结</h1><h2>ArrayList和LinkedList的比较</h2><p>1、顺序插入速度ArrayList会比较快，因为ArrayList是基于数组实现的，数组是事先new好的，只要往指定位置塞一个数据就好了；LinkedList则不同，每次顺序插入的时候LinkedList将new一个对象出来，如果对象比较大，那么new的时间势必会长一点，再加上一些引用赋值的操作，所以顺序插入LinkedList必然慢于ArrayList</p><p>2、基于上一点，因为LinkedList里面不仅维护了待插入的元素，还维护了Entry的前置Entry和后继Entry，如果一个LinkedList中的Entry非常多，那么LinkedList将比ArrayList更耗费一些内存</p><p>3、数据遍历的速度，结论是：<strong>使用各自遍历效率最高的方式，ArrayList的遍历效率会比LinkedList的遍历效率高一些</strong></p><p>4、有些说法认为LinkedList做插入和删除更快，这种说法其实是不准确的：</p><p>（1）LinkedList做插入、删除的时候，慢在寻址，快在只需要改变前后Entry的引用地址</p><p>（2）ArrayList做插入、删除的时候，慢在数组元素的批量copy，快在寻址</p><p><strong>所以，如果待插入、删除的元素是在数据结构的前半段尤其是非常靠前的位置的时候，LinkedList的效率将大大快过ArrayList，因为ArrayList将批量copy大量的元素；越往后，对于LinkedList来说，因为它是双向链表，所以在第2个元素后面插入一个数据和在倒数第2个元素后面插入一个元素在效率上基本没有差别，但是ArrayList由于要批量copy的元素越来越少，操作速度必然追上乃至超过LinkedList</strong>。</p><p>从这个分析看出，如果你十分确定你插入、删除的元素是在前半段，那么就使用LinkedList；如果你十分确定你删除、删除的元素在比较靠后的位置，那么可以考虑使用ArrayList。如果你不能确定你要做的插入、删除是在哪儿呢？那还是建议你使用LinkedList吧，因为一来LinkedList整体插入、删除的执行效率比较稳定，没有ArrayList这种越往后越快的情况；二来插入元素的时候，弄得不好ArrayList就要进行一次扩容，记住，<strong>ArrayList底层数组扩容是一个既消耗时间又消耗空间的操作</strong>。</p><h1>参考</h1><p>该文为本人学习的笔记，读取了网上好几篇大牛的心得，其中主要是摘取了<a href="https://www.jianshu.com/p/d5ec2ff72b33" target="_blank">https://www.jianshu.com/p/d5ec2ff72b33</a>当中的内容，请勿怪，谨当复习使用。</p><hr></article>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://picsum.photos/800/204&quot; alt&gt;&lt;/p&gt;
&lt;article class=&quot;_2rhmJa&quot;&gt;&lt;h2&gt;链表&lt;/h2&gt;
&lt;p&gt;LinkedList是基于链表结构的一种List，在分析LinkedList源码前有必要对链表结构进行说明。&lt;/p&gt;
&lt;h3&gt;链表的概念&lt;/h3&gt;
&lt;p&gt;链表是由一系列非连续的节点组成的存储结构，简单分下类的话，链表又分为单向链表和双向链表，而单向/双向链表又可以分为循环链表和非循环链表，下面简单就这四种链表进行图解说明。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="ayjcsgm.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList类</title>
    <link href="ayjcsgm.github.io/2019/10/01/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAArrayList/"/>
    <id>ayjcsgm.github.io/2019/10/01/简单实现一个ArrayList/</id>
    <published>2019-10-01T14:51:31.000Z</published>
    <updated>2019-10-01T16:04:15.779Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picsum.photos/800/203" alt></p><h3>文章目录</h3><ul><li><a href="#javautilArrayListE_1" rel="nofollow" data-token="a618d5c35048e22d7511fddbfa6ee751" target="_self">`java.util.ArrayList`</a></li><li><a href="#ArrayList_22" rel="nofollow" data-token="5a05523de9f87613c99147e08fca875e" target="_self">数组和`ArrayList`的比较</a></li><li><a href="#1_54" rel="nofollow" data-token="dfaf009b3756283764874bc887e1f05a" target="_self">例1</a></li><li><a href="#2_127" rel="nofollow" data-token="a248e5df85b56d1bafc8ae15376be2f4" target="_self">例2</a></li><li><a href="#font_color0099fffont_173" rel="nofollow" data-token="379d5f661a035f153be4b7639bbc7353" target="_self"><font color="#0099ff">书后的练习<font></font></font></a></li></ul><p></p><a id="more"></a> <h1><a name="t1"></a><a id="javautilArrayListE_1"></a><code>java.util.ArrayList&lt;E&gt;</code></h1><p>从书中各种代码来看，<code>java.util.ArrayList&lt;E&gt;</code> 是非常重要的一个类，在代码中广泛使用，<code>E</code>表示泛型，<code>ArrayList</code>是一个泛型类。<br><code>ArrayList</code>相当于C++ 的<code>vector</code>，用于存储对象。与数组不同，数组一旦创建，长度固定，但是<code>ArrayList</code>的长度是动态的，不受限制，可以存储任意多的对象，但是只能存储对象，不能存储原生数据类型例如<code>int</code>。</p><div class="table-box"><table><thead><tr><th>java.util.ArrayList &lt; E &gt; 的一些方法</th><th>描述</th></tr></thead><tbody><tr><td>+ArrayList()</td><td>构造函数，创建一个空的列表, size为0</td></tr><tr><td>+add(o: E): void</td><td>在list的末尾添加一个元素o</td></tr><tr><td>+add(index: int, o: E): void</td><td>在指定的index处插入元素o</td></tr><tr><td>+clear(): void</td><td>从list中删除所有元素</td></tr><tr><td>+contains(o: Object): boolean</td><td>如果list含有元素o，返回true</td></tr><tr><td>+get(index: int): E</td><td>返回指定index处的元素</td></tr><tr><td>+indexOf(o: Object): int</td><td>返回list中第一个匹配元素的index</td></tr><tr><td>+isEmpty(): boolean</td><td>如果list不含元素，返回true</td></tr><tr><td>+lastIndexOf(o: Object): int</td><td>返回list中最后一个匹配元素的index</td></tr><tr><td>+remove(o: Object): boolean</td><td>删除list中的第一个元素o，如果元素被删除，返回true</td></tr><tr><td>+size(): int</td><td>返回list中元素个数</td></tr><tr><td>+remove(index: int): boolean</td><td>删除指定index处的元素，如果元素被删除，返回true</td></tr><tr><td>+set(index: int, o: E): E</td><td>设置指定index处的元素为o</td></tr></tbody></table></div><h1><a name="t2"></a><a id="ArrayList_22"></a>数组和<code>ArrayList</code>的比较</h1><div class="table-box"><table><thead><tr><th>操作</th><th>Array</th><th>ArrayList</th></tr></thead><tbody><tr><td>创建 array/ArrayList</td><td>String[] a = new String[10]</td><td>ArrayList list = new ArrayList&lt;&gt;();</td></tr><tr><td>访问一个元素</td><td>a[index]</td><td>list.get(index);</td></tr><tr><td>更新一个元素</td><td>a[index] = “London”;</td><td>list.set(index, “London”);</td></tr><tr><td>返回大小</td><td>a.length</td><td>list.size();</td></tr><tr><td>排序</td><td>java.util.Arrays.sort(array)</td><td>java.util.Collections.sort(arraylist)</td></tr><tr><td>添加一个新元素</td><td>相当复杂</td><td>list.add(“London”);</td></tr><tr><td>插入一个新元素</td><td>相当复杂</td><td>list.add(index, “London”);</td></tr><tr><td>删除一个元素</td><td>相当复杂</td><td>list.remove(index);</td></tr><tr><td>删除一个元素</td><td>相当复杂</td><td>list.remove(Object);</td></tr><tr><td>删除所有元素</td><td>？</td><td>list.clear();</td></tr></tbody></table></div><p>创建一个存储字符串的ArrayList对象：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> cities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>创建一个存储日期的ArrayList对象：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ArrayList<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token operator">&gt;</span> dates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>JDK 7 之后，下述表达式</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>AConcreteType<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics function"><span class="token punctuation">&lt;</span>AConcreteType<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>可以简化为：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>AConcreteType<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>因为编译器有一个新的feature叫做类型推断(type inference)， 能够从变量声明推断类型。</p><h1><a name="t3"></a><a id="1_54"></a>例1</h1><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArrayList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Create a list to store cities</span>        ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> cityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>其中<code>System.out.println(cityList.toString());</code> 等同于 <code>System.out.println(cityList);</code></p><p><code>toString()</code>方法返回列表的字符串表示，形式为 <code>[e0.toString(), e1.toString(), ..., ek.toString()]</code>，<code>e0, e1, . . . ,</code>和 <code>ek</code> 都是列表中的元素。</p><p>由于ArrayList只能存储对象，不能存储原生数据类型数据，下面的代码是错误的：<br><code>ArrayList&lt;int&gt; list = new ArrayList&lt;&gt;();</code> <strong>错误！！！！！</strong><br>只能写成：<br><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></p><h1><a name="t4"></a><a id="2_127"></a>例2</h1><p>用户输入一个数字序列，假定输入以<code>0</code>结尾，且<code>0</code>不计入数字序列，打印序列中不重复的数字：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">package</span> TEST_ALL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><p><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistinctNumbers</span> <span class="token punctuation">{</span><br>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>        ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><br>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">“Enter integers (input ends with 0): “</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token keyword">int</span> value<span class="token punctuation">;</span><br>        <span class="token keyword">do</span> <span class="token punctuation">{</span><br>            value <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Read a value from the input</span><br>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><br>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add the value if it is not in the list</span><br>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token comment">// Display the distinct numbers</span><br>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><br>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">“ “</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">}</span><br><span class="token punctuation">}</span></p><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>运行结果：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">Enter integers (input ends with 0): 2 32 3 1 2 3 2 9 02 32 3 1 9 <div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>可以用下列 foreach 循环遍历一个array list：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">for</span> <span class="token punctuation">(</span>elementType element<span class="token operator">:</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Process the element </span><span class="token punctuation">}</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>例如上例中的语句：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>可以改写为：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token operator">:</span> list<span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><h1><a name="t5"></a><a id="font_color0099fffont_173"></a><font color="#0099ff">书后的练习<font></font></font></h1><p>我做的答案：</p><p><strong>11.30 How do you do the following?</strong></p><p>a. Create an ArrayList for storing double values?</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>Double<span class="token punctuation">&gt;</span></span> list_double <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics function"><span class="token punctuation">&lt;</span>Double<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>b. Append an object to a list?</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">Double o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list_double<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>c. Insert an object at the beginning of a list?</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">Double o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list_double<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>d. Find the number of objects in a list?</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">list_double<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>e. Remove a given object from a list?</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">Double o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>list_double<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span>    list_double<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>f. Remove the last object from the list?</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">list_double<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>list_double<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>g. Check whether a given object is in a list?</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">Double o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list_double<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>h. Retrieve an object at a specified index from a list?</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>list_double<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><strong>11.31 Identify the errors in the following code.</strong></p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Denver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Austin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # 错误，元素数据类型必须一致，不能改成DateString city <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Dallas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> #System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # 错误，index 超出 size<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><code>list.set(3, "Dallas")</code>; 和<code>list.get(3)</code>都是错的，You cannot use the <code>get(index)</code> and <code>set(index, element)</code> methods if the element is not in the list. 看源代码，<code>get</code> 和 <code>set</code> 都有<code>RangeCheck(index);</code> 这个函数：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">RangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">", Size: "</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><strong>11.32</strong> Suppose the <code>ArrayList list</code> contains <code>{"Dallas", "Dallas", "Houston", "Dallas"}</code>.What is the  <code>list</code> after invoking <code>list.remove("Dallas")</code>one time?<br>Does the following code correctly remove all elements with value <code>"Dallas"</code> from<br>the <code>list</code>?  If not, correct the code.</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"Dallas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>调用一次<code>list.remove("Dallas")</code>， <code>list</code> 变为 <code>{ "Dallas", "Houston", "Dallas"}</code>，<br>code不能完全删除 <code>"Dallas"</code>，因为最后结果是<code>{"House", "Dallas"}</code>， 应该改成：</p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">while</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Dallas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"Dallas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><strong>11.33 Explain why the following code displays [1, 3] rather than [2, 3].</strong></p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>因为<code>remove</code>方法有两种签名：<code>list.remove(Object)</code>，<code>list.remove(index)</code>;  此处调用的是第二种，如果要删除第一个元素，必须改成<code>list.remove((Integer)1)</code>.<br>(这里不是特别理解)</p><p><strong>11.34 Explain why the following code is wrong.</strong></p><pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ArrayList<span class="token generics function"><span class="token punctuation">&lt;</span>Double<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>错误是因为， <code>1</code> 为整型，与 <code>Double</code> 类型不符，必须改成 <code>1.0</code>.<br>也不能改为<code>list.add((Double)1)</code>, 否则会显示 inconvertible type 的错误.</p><hr><p>[1] Introduction to Java Programming 10th edition  Chapter 11.11</p><pre><code>&lt;/div&gt;</code></pre><p>简单实现一个ArrayList类</p><pre><code>package hqp.MyArrayList;public class test {    //ArrayList底层是个object类型的数组    Object[] value;    //数组中被使用的数量    int count;    //空构造    public test() {        // value=new Object[10];        this(10);    }    // 参数构造器    public test(int length) {        value = new Object[length];    }    //添加add方法    public void add(Object o) {        value[count] = o;        count++;        if (count &gt;= value.length) {            Object[] newlist = new Object[value.length * 2 + 1];            for (int i = 0; i &lt; value.length; i++) {                newlist[i] = value[i];            }            value = newlist;        }    }    //重写tostring    @Override    public String toString() {        StringBuilder stringBuilder = new StringBuilder();        stringBuilder.append(&quot;[&quot;);        for (int i = 0; i &lt;=count-1; i++) {            stringBuilder.append(value[i] + &quot;,&quot;);        }        stringBuilder.setCharAt(stringBuilder.length() - 1, &apos;]&apos;);        return stringBuilder.toString();    }    private boolean isEmpty() {        return count==1;    }    private void clear() {        for (int i = 0; i &lt;count ; i++) {            value[i]=&quot;&quot;;            count=1;        }    }    private void remove(Object o) {        for (int i = 0; i &lt; count; i++) {            if (o.equals(value[i])) {                s(i);            }        }    }    private void s(int i) {        int s = count - i - 1;        if (s &gt; 0) {            System.arraycopy(value, i + 1, value, i, s);            value[--count] = null;        }    }    public static void main(String[] args) {        //创建一个自定义的数组的对象        test list = new test();        list.add(&quot;aaa&quot;);        list.add(1123);        list.add(1123);        list.add(1123);        list.add(1123);        list.add(1123);        list.add(1123);        list.add(1123);        list.add(1123);        list.add(1123);        list.add(1123);        list.remove(&quot;aaa&quot;);        System.out.println(list);        list.clear();        System.out.println(list);        System.out.println(list.isEmpty());    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://picsum.photos/800/203&quot; alt&gt;&lt;/p&gt;
&lt;h3&gt;文章目录&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#javautilArrayListE_1&quot; rel=&quot;nofollow&quot; data-token=&quot;a618d5c35048e22d7511fddbfa6ee751&quot; target=&quot;_self&quot;&gt;`java.util.ArrayList`&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#ArrayList_22&quot; rel=&quot;nofollow&quot; data-token=&quot;5a05523de9f87613c99147e08fca875e&quot; target=&quot;_self&quot;&gt;数组和`ArrayList`的比较&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#1_54&quot; rel=&quot;nofollow&quot; data-token=&quot;dfaf009b3756283764874bc887e1f05a&quot; target=&quot;_self&quot;&gt;例1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#2_127&quot; rel=&quot;nofollow&quot; data-token=&quot;a248e5df85b56d1bafc8ae15376be2f4&quot; target=&quot;_self&quot;&gt;例2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;#font_color0099fffont_173&quot; rel=&quot;nofollow&quot; data-token=&quot;379d5f661a035f153be4b7639bbc7353&quot; target=&quot;_self&quot;&gt;&lt;font color=&quot;#0099ff&quot;&gt;书后的练习&lt;font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="ayjcsgm.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络面试问题集锦</title>
    <link href="ayjcsgm.github.io/2019/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>ayjcsgm.github.io/2019/10/01/计算机网络面试问题集锦/</id>
    <published>2019-10-01T08:18:25.000Z</published>
    <updated>2019-10-02T11:17:31.650Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picsum.photos/800/202" alt></p><hr><p><strong>摘要：</strong></p><p>本文对面试/笔试过程中经常会被问到的一些关于计算机网络的问题进行了梳理和总结。关于这块内容的初步了解和掌握，建议大家读一读《图解HTTP》一书。</p><hr><a id="more"></a> <p><strong>1、Http和Https的区别</strong></p><p>　　Http协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：</p><ul><li><p>端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；</p></li><li><p>资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；</p></li><li><p>开销：Https通信需要证书，而证书一般需要向认证机构购买； <br>　 <br>Https的加密机制是一种共享密钥加密和公开密钥加密并用的混合加密机制。</p></li></ul><hr><p><strong>2、对称加密与非对称加密</strong></p><p>　　对称密钥加密是指加密和解密使用同一个密钥的方式，这种方式存在的最大问题就是密钥发送问题，即如何安全地将密钥发给对方；而非对称加密是指使用一对非对称密钥，即公钥和私钥，公钥可以随意发布，但私钥只有自己知道。发送密文的一方使用对方的公钥进行加密处理，对方接收到加密信息后，使用自己的私钥进行解密。</p><p>　　由于非对称加密的方式不需要发送用来解密的私钥，所以可以保证安全性；但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密所使用的密钥我们可以通过非对称加密的方式发送出去。</p><hr><p><strong>3、三次握手与四次挥手</strong></p><p>　(1). 三次握手(我要和你建立链接，你真的要和我建立链接么，我真的要和你建立链接，成功)：</p><ul><li><p>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p></li><li><p>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</p></li><li><p>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p><p>　　　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/c7m5fo6qdua0q7me88jm9w10/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次握手.png-12.4kB" title></p></li></ul><hr><p>　(2). 四次挥手(我要和你断开链接；好的，断吧。我也要和你断开链接；好的，断吧)：</p><ul><li><p>第一次挥手：Client发送一个FIN，<font color="red"><b>用来关闭Client到Server的数据传送</b></font>，Client进入FIN_WAIT_1状态。</p></li><li><p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。此时TCP链接处于半关闭状态，即客户端已经没有要发送的数据了，但服务端若发送数据，则客户端仍要接收。</p></li><li><p>第三次挥手：Server发送一个FIN，<font color="red"><b>用来关闭Server到Client的数据传送</b></font>，Server进入LAST_ACK状态。</p></li><li><p>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p><p>　　　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/ardiuu1otopo9f1jd4df18iz/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="四次挥手.png-12.6kB" title></p></li></ul><hr><p><strong>4、为什么TCP链接需要三次握手，两次不可以么，为什么？</strong></p><p>　　为了防止 <font color="red"><b>已失效的链接请求报文突然又传送到了服务端</b></font>，因而产生错误。</p><p>　　客户端发出的连接请求报文并未丢失，而是在某个网络节点长时间滞留了，以致延误到链接释放以后的某个时间才到达Server。这是，Server误以为这是Client发出的一个新的链接请求，于是就向客户端发送确认数据包，同意建立链接。若不采用“三次握手”，那么只要Server发出确认数据包，新的链接就建立了。由于client此时并未发出建立链接的请求，所以其不会理睬Server的确认，也不与Server通信；而这时Server一直在等待Client的请求，这样Server就白白浪费了一定的资源。若采用“三次握手”，在这种情况下，由于Server端没有收到来自客户端的确认，则就会知道Client并没有要求建立请求，就不会建立链接。</p><hr><p><strong>5、TCP协议如何来保证传输的可靠性</strong></p><p>　　TCP提供一种面向连接的、可靠的字节流服务。其中，面向连接意味着两个使用TCP的应用（通常是一个客户和一个服务器）在彼此交换数据之前必须先建立一个TCP连接。在一个TCP连接中，仅有两方进行彼此通信；而字节流服务意味着两个应用程序通过TCP链接交换8bit字节构成的字节流，TCP不在字节流中插入记录标识符。</p><p>　　<strong>对于可靠性，TCP通过以下方式进行保证：</strong></p><ul><li><p><font color="red">数据包校验：</font>目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时TCP发送数据端超时后会重发数据；</p></li><li><p><font color="red">对失序数据包重排序：</font>既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。TCP将对失序数据进行重新排序，然后才交给应用层；</p></li><li><p><font color="red">丢弃重复数据：</font>对于重复数据，能够丢弃重复数据；</p></li><li><p><font color="red">应答机制：</font>当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</p></li><li><p><font color="red">超时重发：</font>当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</p></li><li><p><font color="red">流量控制：</font>TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP使用的流量控制协议是可变大小的滑动窗口协议。</p></li></ul><hr><p><strong>6、客户端不断进行请求链接会怎样？DDos(Distributed Denial of Service)攻击？</strong></p><p>　　服务器端会为每个请求创建一个链接，并向其发送确认报文，然后等待客户端进行确认</p><hr><p>1)、DDos 攻击</p><ul><li>客户端向服务端发送请求链接数据包</li><li>服务端向客户端发送确认数据包</li><li>客户端不向服务端发送确认数据包，服务器一直等待来自客户端的确认</li></ul><hr><p>2)、DDos 预防<font color="red"><b> ( 没有彻底根治的办法，除非不使用TCP )</b></font></p><ul><li>限制同时打开SYN半链接的数目</li><li>缩短SYN半链接的Time out 时间</li><li>关闭不必要的服务</li></ul><hr><p><strong>7、Get与POST的区别</strong></p><p>　　GET与POST是我们常用的两种HTTP Method，二者之间的区别主要包括如下五个方面： </p><p>(1). 从功能上讲，GET一般用来从服务器上获取资源，POST一般用来更新服务器上的资源；</p><p>(2). 从REST服务角度上说，GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；</p><p>(3). 从请求参数形式上看，GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的<font color="red"> 请求头 </font>中，以?分割URL和传输数据，参数之间以&amp;相连。特别地，如果数据是英文字母/数字，原样发送；否则，会将其编码为 application/x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII)；而POST请求会把提交的数据则放置在是HTTP请求报文的 <font color="red">请求体</font> 中。</p><p>(4). 就安全性而言，POST的安全性要比GET的安全性高，因为GET请求提交的数据将明文出现在URL上，而且POST请求参数则被包装到请求体中，相对更安全。</p><p>(5). 从请求的大小看，GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。</p><hr><p>1). GET请求中URL编码的意义</p><p>　　我们知道，在GET请求中会对URL中非西文字符进行编码，这样做的目的就是为了 <font color="red"><b>避免歧义</b></font>。看下面的例子，</p><p>　　针对“name1=value1&amp;name2=value2”的例子，我们来谈一下数据从客户端到服务端的解析过程。首先，上述字符串在计算机中用ASCII吗表示为： </p><pre class="prettyprint" name="code"><code class="language-text hljs mathematica has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">   <span class="hljs-number">6E616</span>D6531 <span class="hljs-number">3</span><span class="hljs-keyword">D</span> <span class="hljs-number">76616</span>C756531 <span class="hljs-number">26</span> <span class="hljs-number">6E616</span>D6532 <span class="hljs-number">3</span><span class="hljs-keyword">D</span> <span class="hljs-number">76616</span>C756532   <span class="hljs-number">6E616</span>D6531：name1    <span class="hljs-number">3</span><span class="hljs-keyword">D</span>：=    <span class="hljs-number">76616</span>C756531：value1    <span class="hljs-number">26</span>：&amp;   <span class="hljs-number">6E616</span>D6532：name2    <span class="hljs-number">3</span><span class="hljs-keyword">D</span>：=    <span class="hljs-number">76616</span>C756532：value2 <div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>　　服务端在接收到该数据后就可以遍历该字节流，一个字节一个字节的吃，当吃到3D这字节后，服务端就知道前面吃得字节表示一个key，再往后吃，如果遇到26，说明从刚才吃的3D到26子节之间的是上一个key的value，以此类推就可以解析出客户端传过来的参数。</p><p>　　现在考虑这样一个问题，如果我们的参数值中就包含=或&amp;这种特殊字符的时候该怎么办？比如，“name1=value1”，其中value1的值是“va&amp;lu=e1”字符串，那么实际在传输过程中就会变成这样“name1=va&amp;lu=e1”。这样，我们的本意是只有一个键值对，但是服务端却会解析成两个键值对，这样就产生了歧义。</p><p>　　那么，如何解决上述问题带来的歧义呢？解决的办法就是对参数进行URL编码：例如，我们对上述会产生歧义的字符进行URL编码后结果：“name1=va%26lu%3D”，这样服务端会把紧跟在“%”后的字节当成普通的字节，就是不会把它当成各个参数或键值对的分隔符。</p><hr><p><strong>8、TCP与UDP的区别</strong></p><p>　　TCP (Transmission Control Protocol)和UDP(User Datagram Protocol)协议属于传输层协议，它们之间的区别包括：</p><ul><li><p>TCP是面向连接的，UDP是无连接的；</p></li><li><p>TCP是可靠的，UDP是不可靠的；</p></li><li><p>TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多的通信模式；</p></li><li><p>TCP是面向字节流的，UDP是面向报文的；</p></li><li><p>TCP有拥塞控制机制;UDP没有拥塞控制，适合媒体通信；</p></li><li><p>TCP首部开销(20个字节)比UDP的首部开销(8个字节)要大；</p></li></ul><hr><p><strong>9、TCP的拥塞处理</strong></p><p>　　计算机网络中的带宽、交换结点中的缓存及处理机等都是网络的资源。在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就会变坏，这种情况就叫做拥塞。拥塞控制就是 <font color="red">防止过多的数据注入网络中，这样可以使网络中的路由器或链路不致过载</font>。注意，<font color="red"><b>拥塞控制和流量控制不同，前者是一个全局性的过程，而后者指点对点通信量的控制。</b></font>拥塞控制的方法主要有以下四种：</p><hr><p>1). <font color="red"><b>慢启动：</b></font>不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小;</p><hr><p>2). <font color="red"><b>拥塞避免：</b></font>拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍，这样拥塞窗口按线性规律缓慢增长。</p><p>　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/whi0y5sbc3tx9qcdp0s532gw/%E6%85%A2%E5%BC%80%E5%A7%8B%E4%B8%8E%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D.png" alt="慢开始与拥塞避免.png-90.3kB" title></p><hr><p>3). <font color="red"><b>快重传：</b></font>快重传要求接收方在收到一个 <font color="red"><b>失序的报文段</b></font> 后就立即发出 <font color="red"><b>重复确认</b></font>（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</p><p>　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/wuktdms9jtg4s9m4pe5kcbiq/%E5%BF%AB%E9%87%8D%E4%BC%A0.jpg" alt="快重传.jpg-42.3kB" title></p><hr><p>4). <font color="red"><b>快恢复：</b></font>快重传配合使用的还有快恢复算法，当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半，但是接下去并不执行慢开始算法：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</p><p>　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/90am1vmd7408ef00mav8pfzk/%E5%BF%AB%E6%81%A2%E5%A4%8D.jpg" alt="快恢复.jpg-52.9kB" title></p><hr><p><strong>10、从输入网址到获得页面的过程</strong></p><p>　　(1). 浏览器查询 DNS，获取域名对应的IP地址:具体过程包括浏览器搜索自身的DNS缓存、搜索操作系统的DNS缓存、读取本地的Host文件和向本地DNS服务器进行查询等。对于向本地DNS服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析(此解析具有权威性)；如果要查询的域名不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；</p><p>　　(2). 浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</p><p>　　(3). TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；</p><p>　　(4). 服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</p><p>　　(5). 浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；</p><p>　　(6). 浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</p><hr><p><strong>11、Session、Cookie 与 Application</strong></p><p>　　Cookie和Session都是客户端与服务器之间保持状态的解决方案，具体来说，cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。</p><hr><p>(1). Cookie及其相关API</p><p>　　Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie，而客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器，服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p><p>　　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/obkdzovq0ozu2oib430o9xvp/Cookoe-HttpServletResponse.png" alt="Cookoe-HttpServletResponse.png-38.6kB" title></p><p>　　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/q07mgp37mzhj1krtg0m46jvu/HttpServletrequest-cookie.png" alt="HttpServletrequest-cookie.png-8.6kB" title></p><hr><p>(2). Session及其相关API</p><p>　　同样地，会话状态也可以保存在服务器端。客户端请求服务器，如果服务器记录该用户状态，就获取Session来保存状态，这时，如果服务器已经为此客户端创建过session，服务器就按照sessionid把这个session检索出来使用；如果客户端请求不包含sessionid，则为此客户端创建一个session并且生成一个与此session相关联的sessionid，并将这个sessionid在本次响应中返回给客户端保存。保存这个sessionid的方式可以采用<font color="red"> cookie机制 </font>，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器；若浏览器禁用Cookie的话，可以通过 <font color="red">URL重写机制</font> 将sessionid传回服务器。</p><p>　　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/fgsd064ji0ggxwmqosky1n1q/Session-HttpServletRequest.png" alt="Session-HttpServletRequest.png-10.1kB" title></p><hr><p>(3). Session 与 Cookie 的对比</p><ul><li><p><font color="red">实现机制：</font>Session的实现常常依赖于Cookie机制，通过Cookie机制回传SessionID；</p></li><li><p><font color="red">大小限制：</font>Cookie有大小限制并且浏览器对每个站点也有cookie的个数限制，Session没有大小限制，理论上只与服务器的内存大小有关；</p></li><li><p><font color="red">安全性：</font>Cookie存在安全隐患，通过拦截或本地文件找得到cookie后可以进行攻击，而Session由于保存在服务器端，相对更加安全；</p></li><li><p><font color="red">服务器资源消耗：</font>Session是保存在服务器端上会存在一段时间才会消失，如果session过多会增加服务器的压力。</p><p>Application（ServletContext）：与一个Web应用程序相对应，为应用程序提供了一个全局的状态，所有客户都可以使用该状态。</p></li></ul><hr><p>(4). Application</p><p>　　Application（Java Web中的ServletContext）：与一个Web应用程序相对应，为应用程序提供了一个全局的状态，所有客户都可以使用该状态。</p><hr><p><strong>12、SQL 注入</strong></p><p>　　SQL注入就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><p>1). SQL注入攻击的总体思路</p><p>　　(1). 寻找到SQL注入的位置 <br>　　(2). 判断服务器类型和后台数据库类型 <br>　　(3). 针对不通的服务器和数据库特点进行SQL注入攻击</p><hr><p>2). SQL注入攻击实例</p><p>　　比如，在一个登录界面，要求输入用户名和密码，可以这样输入实现免帐号登录：</p><pre class="prettyprint" name="code"><code class="language-text hljs lua has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">用户名： ‘<span class="hljs-keyword">or</span> <span class="hljs-number">1</span> = <span class="hljs-number">1</span> <span class="hljs-comment">--</span>密 码：<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>　　用户一旦点击登录，如若没有做特殊处理，那么这个非法用户就很得意的登陆进去了。这是为什么呢?下面我们分析一下：从理论上说，后台认证程序中会有如下的SQL语句：String sql = “select * from user_table where username=’ “+userName+” ’ and password=’ “+password+” ‘”; 因此，当输入了上面的用户名和密码，上面的SQL语句变成：<font color="red">SELECT * FROM user_table WHERE username=’’or 1 = 1 – and password=’’</font>。分析上述SQL语句我们知道， <br>username=‘ or 1=1 这个语句一定会成功；然后后面加两个-，这意味着注释，它将后面的语句注释，让他们不起作用。这样，上述语句永远都能正确执行，用户轻易骗过系统，获取合法身份。</p><hr><p>3). 应对方法</p><p>(1). 参数绑定</p><p>　　使用预编译手段，绑定参数是最好的防SQL注入的方法。目前许多的ORM框架及JDBC等都实现了SQL预编译和参数绑定功能，攻击者的恶意SQL会被当做SQL的参数而不是SQL命令被执行。在mybatis的mapper文件中，对于传递的参数我们一般是使用#和<span>$</span>来获取参数值。当使用#时，变量是占位符，就是一般我们使用javajdbc的PrepareStatement时的占位符，所有可以防止sql注入；当使用$时，变量就是直接追加在sql中，一般会有sql注入问题。</p><p>(2). 使用正则表达式过滤传入的参数</p><hr><p><strong>13、 XSS 攻击</strong></p><p>　　XSS是一种经常出现在web应用中的计算机安全漏洞，与SQL注入一起成为web中最主流的攻击方式。XSS是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些脚本代码嵌入到web页面中去，使别的用户访问都会执行相应的嵌入代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</p><hr><p>1). XSS攻击的危害</p><ul><li><p>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</p></li><li><p>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</p></li><li><p>盗窃企业重要的具有商业价值的资料</p></li><li><p>非法转账</p></li><li><p>强制发送电子邮件</p></li><li><p>网站挂马</p></li><li><p>控制受害者机器向其它网站发起攻击</p></li></ul><hr><p>2). 原因解析</p><p>　　<font color="red">主要原因：</font>过于信任客户端提交的数据！</p><p>　　<font color="red">解决办法：</font>不信任任何客户端提交的数据，只要是客户端提交的数据就应该先进行相应的过滤处理然后方可进行下一步的操作。</p><p>　　<font color="red">进一步分析细节：</font>客户端提交的数据本来就是应用所需要的，但是恶意攻击者利用网站对客户端提交数据的信任，在数据中插入一些符号以及javascript代码，那么这些数据将会成为应用代码中的一部分了，那么攻击者就可以肆无忌惮地展开攻击啦，因此我们绝不可以信任任何客户端提交的数据！！！</p><hr><p>3). XSS 攻击分类</p><p>(1). 反射性XSS攻击 (非持久性XSS攻击)</p><p>　　漏洞产生的原因是攻击者注入的数据反映在响应中。一个典型的非持久性XSS攻击包含一个带XSS攻击向量的链接(即每次攻击需要用户的点击)，例如，正常发送消息：</p><pre class="prettyprint" name="code"><code class="language-text hljs avrasm has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="hljs-label">http:</span>//www<span class="hljs-preprocessor">.test</span><span class="hljs-preprocessor">.com</span>/message<span class="hljs-preprocessor">.php</span>?send=Hello,World！<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>接收者将会接收信息并显示Hello,World；但是，非正常发送消息：</p><pre class="prettyprint" name="code"><code class="language-text hljs xml has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">http://www.test.com/message.php?send=<span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">alert(‘foolish!’)</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>！<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>接收者接收消息显示的时候将会弹出警告窗口！</p><hr><p>(2). 持久性XSS攻击 (留言板场景)</p><p>　　XSS攻击向量(一般指XSS攻击代码)存储在网站数据库，当一个页面被用户打开的时候执行。也就是说，每当用户使用浏览器打开指定页面时，脚本便执行。与非持久性XSS攻击相比，持久性XSS攻击危害性更大。从名字就可以了解到，持久性XSS攻击就是将攻击代码存入数据库中，然后客户端打开时就执行这些攻击代码。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">例如，留言板表单中的表单域：<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><pre class="prettyprint" name="code"><code class="language-text hljs xml has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">“text”</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">“content”</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">“这里是用户填写的数据”</span>&gt;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>正常操作流程是：用户是提交相应留言信息 —— 将数据存储到数据库 —— 其他用户访问留言板，应用去数据并显示；而非正常操作流程是攻击者在value填写:</p><pre class="prettyprint" name="code"><code class="language-javascript hljs  has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">&lt;script&gt;alert(‘foolish!’)；&lt;<span class="hljs-regexp">/script&gt; &lt;!--或者html其他标签（破坏样式。。。）、一段攻击型代码--&gt;</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>并将数据提交、存储到数据库中；当其他用户取出数据显示的时候，将会执行这些攻击性代码。</p><hr><p>4). 修复漏洞方针</p><p>　　漏洞产生的根本原因是 <font color="red">太相信用户提交的数据，对用户所提交的数据过滤不足所导致的</font>，因此解决方案也应该从这个方面入手，具体方案包括：</p><ul><li><p>将重要的cookie标记为http only, 这样的话Javascript 中的document.cookie语句就不能 <br>获取到cookie了（如果在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击）；</p></li><li><p>表单数据规定值的类型，例如：年龄应为只能为int、name只能为字母数字组合。。。。</p></li><li><p>对数据进行Html Encode 处理</p></li><li><p>过滤或移除特殊的Html标签，例如: &lt;script&gt;, &lt;iframe&gt; , &lt; for &lt;, &gt; for&gt;, &amp;quot for</p></li><li><p>过滤JavaScript 事件的标签，例如 “οnclick=”, “onfocus” 等等。</p><p>　　需要注意的是，在有些应用中是允许html标签出现的，甚至是javascript代码出现。因此，我们在过滤数据的时候需要仔细分析哪些数据是有特殊要求（例如输出需要html代码、javascript代码拼接、或者此表单直接允许使用等等），然后区别处理！</p></li></ul><hr><p><strong>14、OSI网络体系结构与TCP/IP协议模型</strong></p><p>　　为了更好地了解计算机网络体系结构，笔者以两篇博客的篇幅来介绍这个计算机网络中最为重要的知识点，具体见<a href="http://blog.csdn.net/justloveyou_/article/details/69611328" rel="nofollow" target="_blank" data-token="fa5059c63a22260eef663a726421d953">《计算机网络体系结构综述（上）》</a> 和 <a href="http://blog.csdn.net/justloveyou_/article/details/69612153" rel="nofollow" target="_blank" data-token="2c8e3fa61109fce6dac5d9c5eeb094f8">《计算机网络体系结构综述（下）》</a>。下面只做简要的总结。</p><p>　　在<a href="http://blog.csdn.net/justloveyou_/article/details/69612153" rel="nofollow" target="_blank" data-token="2c8e3fa61109fce6dac5d9c5eeb094f8">《计算机网络体系结构综述（下）》</a>一文中，我们知道TCP/IP与OSI最大的不同在于：OSI是一个理论上的网络通信模型，而TCP/IP则是实际上的网络通信标准。但是，它们的初衷是一样的，都是为了使得两台计算机能够像两个知心朋友那样能够互相准确理解对方的意思并做出优雅的回应。现在，我们对OSI七层模型的各层进行简要的介绍：</p><p>　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/0qwq331jj8bzgmqst282f6lp/OSI%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8ETCPIP%E5%8D%8F%E8%AE%AE%E6%A8%A1%E5%9E%8B.png" alt="OSI网络体系结构与TCPIP协议模型.png-51.3kB" title></p><hr><p>1). 物理层</p><p>　　参考模型的最低层，也是OSI模型的第一层，实现了相邻计算机节点之间比特流的透明传送，并尽可能地屏蔽掉具体传输介质和物理设备的差异，使其上层(数据链路层)不必关心网络的具体传输介质。</p><hr><p>2). 数据链路层（data link layer）</p><p>　　接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层在物理层提供的比特流的基础上，通过差错控制、流量控制方法，使有差错的物理线路变为无差错的数据链路，即提供可靠的通过物理介质传输数据的方法。</p><hr><p>3). 网络层</p><p>　　将网络地址翻译成对应的物理地址，并通过路由选择算法为分组通过通信子网选择最适当的路径。</p><p>　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/ed9145bf4nus32fr7umxxnk7/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E4%B8%8E%E7%BD%91%E8%B7%AF%E5%B1%82.png" alt="数据链路层与网路层.png-58.4kB" title></p><hr><p>4). 传输层（transport layer）</p><p>　　在源端与目的端之间提供可靠的透明数据传输，使上层服务用户不必关系通信子网的实现细节。在协议栈中，传输层位于网络层之上，传输层协议为不同主机上运行的进程提供逻辑通信，而网络层协议为不同主机提供逻辑通信，如下图所示。</p><p>　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/5td1y45fm09cbhgw07o6fgfc/%E7%BD%91%E8%B7%AF%E5%B1%82%E4%B8%8E%E4%BC%A0%E8%BE%93%E5%B1%82.png" alt="网路层与传输层.png-52.8kB" title></p><p>　　实际上，网络层可以看作是传输层的一部分，其为传输层提供服务。但对于终端系统而言，网络层对它们而言是透明的，它们知道传输层的存在，也就是说，在逻辑上它们认为是传输层为它们提供了端对端的通信，这也是分层思想的妙处。</p><hr><p>5). 会话层（Session Layer）</p><p>　　会话层是OSI模型的第五层，是用户应用程序和网络之间的接口，负责在网络中的两节点之间建立、维持和终止通信。</p><hr><p>6). 表示层（Presentation Layer）：数据的编码，压缩和解压缩，数据的加密和解密</p><p>　　表示层是OSI模型的第六层，它对来自应用层的命令和数据进行解释，以确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</p><hr><p>7). 应用层（Application layer）：为用户的应用进程提供网络通信服务</p><hr><p><strong>15、TCP和UDP分别对应的常见应用层协议</strong></p><p>1). TCP对应的应用层协议</p><ul><li><p><font color="red">FTP</font>：定义了文件传输协议，使用21端口。常说某某计算机开了FTP服务便是启动了文件传输服务。下载文件，上传主页，都要用到FTP服务。</p></li><li><p><font color="red">Telnet</font>：它是一种用于远程登陆的端口，用户可以以自己的身份远程连接到计算机上，通过这种端口可以提供一种基于DOS模式下的通信服务。如以前的BBS是-纯字符界面的，支持BBS的服务器将23端口打开，对外提供服务。</p></li><li><p><font color="red">SMTP</font>：定义了简单邮件传送协议，现在很多邮件服务器都用的是这个协议，用于发送邮件。如常见的免费邮件服务中用的就是这个邮件服务端口，所以在电子邮件设置-中常看到有这么SMTP端口设置这个栏，服务器开放的是25号端口。</p></li><li><p><font color="red">POP3</font>：它是和SMTP对应，POP3用于接收邮件。通常情况下，POP3协议所用的是110端口。也是说，只要你有相应的使用POP3协议的程序（例如Fo-xmail或Outlook），就可以不以Web方式登陆进邮箱界面，直接用邮件程序就可以收到邮件（如是163邮箱就没有必要先进入网易网站，再进入自己的邮-箱来收信）。</p></li><li><p><font color="red">HTTP</font>：从Web服务器传输超文本到本地浏览器的传送协议。</p></li></ul><hr><p>2). UDP对应的应用层协议</p><ul><li><p><font color="red">DNS</font>：用于域名解析服务，将域名地址转换为IP地址。DNS用的是53号端口。</p></li><li><p><font color="red">SNMP</font>：简单网络管理协议，使用161号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</p></li><li><p><font color="red">TFTP(Trival File Transfer Protocal)</font>：简单文件传输协议，该协议在熟知端口69上使用UDP服务。</p></li></ul><hr><p>3). 图示</p><p>　　　　　　　　　　<img src="http://static.zybuluo.com/Rico123/r3gm4e6y9hlgqllw8ba10676/TCP%E5%92%8CUDP%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E7%9A%84%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE.png" alt="TCP和UDP分别对应的常见应用层协议.png-41.5kB" title></p><hr><p><strong>16、网络层的ARP协议工作原理</strong></p><p>　　<font color="red"><b>网络层的ARP协议完成了IP地址与物理地址的映射。</b></font>首先，每台主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址的对应关系。当源主机需要将一个数据包要发送到目的主机时，会首先检查自己ARP列表中是否存在该IP地址对应的MAC地址：如果有，就直接将数据包发送到这个MAC地址；如果没有，就向本地网段发起一个ARP请求的广播包，查询此目的主机对应的MAC地址。此ARP请求数据包里包括源主机的IP地址、硬件地址、以及目的主机的IP地址。网络中所有的主机收到这个ARP请求后，会检查数据包中的目的IP是否和自己的IP地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的MAC地址和IP地址添加到自己的ARP列表中，如果ARP表中已经存在该IP的信息，则将其覆盖，然后给源主机发送一个ARP响应数据包，告诉对方自己是它需要查找的MAC地址；源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p><hr><p><strong>17、IP地址的分类</strong></p><p>　　IP地址是指互联网协议地址，是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。IP地址编址方案将IP地址空间划分为A、B、C、D、E五类，其中A、B、C是基本类，D、E类作为多播和保留使用，为特殊地址。</p><p>　　每个IP地址包括两个标识码（ID），即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机ID与其对应。A~E类地址的特点如下：</p><ul><li><p>A类地址：以0开头，第一个字节范围：0~127；</p></li><li><p>B类地址：以10开头，第一个字节范围：128~191；</p></li><li><p>C类地址：以110开头，第一个字节范围：192~223；</p></li><li><p>D类地址：以1110开头，第一个字节范围为224~239；</p></li><li><p>E类地址：以1111开头，保留地址</p></li></ul><hr><p>1). A类地址：1字节的网络地址 + 3字节主机地址，网络地址的最高位必须是“0”</p><p>　　一个A类IP地址是指， 在IP地址的四段号码中，第一段号码为网络号码，剩下的三段号码为本地计算机的号码。如果用二进制表示IP地址的话，A类IP地址就由1字节的网络地址和3字节主机地址组成，网络地址的最高位必须是“0”。A类IP地址中网络的标识长度为8位，主机标识的长度为24位，A类网络地址数量较少，有126个网络，每个网络可以容纳主机数达1600多万台。</p><p>　　A类IP地址的地址范围1.0.0.0到127.255.255.255（二进制表示为：00000001 00000000 00000000 00000000 - 01111110 11111111 11111111 11111111），最后一个是广播地址。A类IP地址的子网掩码为255.0.0.0，每个网络支持的最大主机数为256的3次方-2=16777214台。</p><hr><p>2). B类地址: 2字节的网络地址 + 2字节主机地址，网络地址的最高位必须是“10”</p><p>　　一个B类IP地址是指，在IP地址的四段号码中，前两段号码为网络号码。如果用二进制表示IP地址的话，B类IP地址就由2字节的网络地址和2字节主机地址组成，网络地址的最高位必须是“10”。B类IP地址中网络的标识长度为16位，主机标识的长度为16位，B类网络地址适用于中等规模的网络，有16384个网络，每个网络所能容纳的计算机数为6万多台。</p><p>　　B类IP地址地址范围128.0.0.0-191.255.255.255（二进制表示为：10000000 00000000 00000000 00000000—-10111111 11111111 11111111 11111111），最后一个是广播地址。B类IP地址的子网掩码为255.255.0.0，每个网络支持的最大主机数为256的2次方-2=65534台。</p><hr><p>3). C类地址: 3字节的网络地址 + 1字节主机地址，网络地址的最高位必须是“110”</p><p>　　一个C类IP地址是指，在IP地址的四段号码中，前三段号码为网络号码，剩下的一段号码为本地计算机的号码。如果用二进制表示IP地址的话，C类IP地址就由3字节的网络地址和1字节主机地址组成，网络地址的最高位必须是“110”。C类IP地址中网络的标识长度为24位，主机标识的长度为8位，C类网络地址数量较多，有209万余个网络。适用于小规模的局域网络，每个网络最多只能包含254台计算机。</p><p>　　C类IP地址范围192.0.0.0-223.255.255.255（二进制表示为: 11000000 00000000 00000000 00000000 - 11011111 11111111 11111111 11111111）。C类IP地址的子网掩码为255.255.255.0，每个网络支持的最大主机数为256-2=254台。</p><hr><p>4). D类地址:多播地址，用于1对多通信，最高位必须是“1110”</p><p>　　D类IP地址在历史上被叫做多播地址(multicast address)，即组播地址。在以太网中，多播地址命名了一组应该在这个网络中应用接收到一个分组的站点。多播地址的最高位必须是“1110”，范围从224.0.0.0到239.255.255.255。</p><hr><p>5). E类地址:为保留地址，最高位必须是“1111”</p><hr><p><strong>18、IP地址与物理地址</strong></p><p>　　物理地址是数据链路层和物理层使用的地址，IP地址是网络层和以上各层使用的地址，是一种逻辑地址，其中ARP协议用于IP地址与物理地址的对应。</p><hr><p><strong>19、 常见状态码及原因短语</strong></p><p>　　HTTP请求结构： 请求方式 + 请求URI + 协议及其版本 <br>　　HTTP响应结构： 状态码 + 原因短语 + 协议及其版本</p><hr><ul><li>1×× : 请求处理中，请求已被接受，正在处理</li></ul><hr><ul><li>2×× : 请求成功，请求被成功处理 <br>    200 OK</li></ul><hr><ul><li>3×× : 重定向，要完成请求必须进行进一步处理 <br>    301 : 永久性转移 <br>    302 ：暂时性转移 <br>    304 ： 已缓存</li></ul><hr><ul><li>4×× : 客户端错误，请求不合法 <br>    400：Bad Request,请求有语法问题 <br>    403：拒绝请求 <br>    404：客户端所访问的页面不存在</li></ul><hr><ul><li>5×× : 服务器端错误，服务器不能处理合法请求 <br>    500 ：服务器内部错误 <br>    503 ： 服务不可用，稍等 <br><br></li></ul><hr><p><strong>20、  http报文头里面含有什么</strong></p>请求头<p>返回头<br>文本域<br>文本编码</p><hr><p><strong>21、  谈谈你所理解的 HTTP 协议？</strong></p><p>http协议是无状态的，简化了服务器的设计，支持大量并发请求。<br>采用TCP作为运输层协议，保证了数据的可靠性。但是http协议本身是无连接的，在通信双方交换http报文之前不需要先建立http连接。<br>HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。<br>1）在HTTP 1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。<br>2）在HTTP 1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。<br>**访问一个网址的流程：<br>a：域名解析<br>b：tcp3次握手建立连接<br>c：建立连接后，发起http请求<br>d：服务器端响应http请求，浏览器得到http请求的内容<br>e：浏览器解析html代码，并请求html代码中的资源<br>f：浏览器通过页面渲染，展现在用户面前</p><hr><p><strong>22、  对 TCP 的理解？三次握手？滑动窗口？</strong></p><p>TCP：一种面向连接的、可靠的、基于字节流的传输层通信协议，全双工模式<br>三次握手：为了保证服务端能收接受到客户端的信息并能做出正确的应答而进行前两次(第一次和第二次)握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次(第二次和第三次)握手，第三步是防止了乙的一直等待而浪费自己的时间，而不是为了保证甲能够正确回应乙的信息。<br>三次握手的目的：为了防止已失效的连接请求报文段突然又传送到了服务端，而产生错误。<br>四次挥手：当 Client 发出FIN报文段时，只是表示 Client 已经没有数据要发送了，Client 告诉 Server，它的数据已经全部发送完毕了；但是，这个时候 Client 还是可以接受来自 Server 的数据；当 Server 返回ACK报文段时，表示它已经知道 Client 没有数据发送了，但是 Server 还是可以发送数据到 Client 的；当 Server 也发送了FIN报文段时，这个时候就表示 Server 也没有数据要发送了，就会告诉 Client ，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。<br>滑动窗口(以字节为单位)：TCP协议作为一个可靠的面向流的传输协议，其可靠性和流量控制由滑动窗口协议保证。<br>流量控制：发送方的发送窗口不能超过接收方给出的接收窗口的数值。<br>已发送并收到确认的数据（不再发送窗口和发送缓冲区之内）、已发送但未收到确认的数据（位于发送窗口之中）、允许发送但尚未发送的数据以及发送窗口外发送缓冲区内暂时不允许发送的数据；</p><hr><p><strong>23、  TCP/UDP有哪些优缺点？</strong></p>1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<p>2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付<br>3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的<br>  UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br>4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>5、TCP首部开销20字节;UDP的首部开销小，只有8个字节<br>6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</p><hr><p><strong>24、  TCP可靠的四大手段</strong></p><p>顺序编号：tcp在传输文件的时候，会将文件拆分为多个tcp数据包，每个装满的数据包大小大约在1k左右，tcp协议为保证可靠传输，会将这些数据包顺序编号<br>确认机制：当数据包成功的被发送方发送给接收方，接收方会根据tcp协议反馈给发送方一个成功接收的ACK信号，信号中包含了当前包的序号<br>超时重传：当发送方发送数据包给接收方时，会为每一个数据包设置一个定时器，当在设定的时间内，发送方仍没有收到接收方的ACK信号，会再次发送该数据包，直到收到接收方的ACK信号或者连接已断开<br>校验信息：tcp首部校验信息较多，udp首部校验信息较少</p><hr><p><strong>25、 为什么不能用两次握手进行连接？</strong></p><p>答：3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。 现在把三次握手改成仅需要两次握手，死锁是可能发生的。</p><hr><p><strong>26、 为什么连接的时候是三次握手，关闭的时候却是四次握手？</strong></p><p>答：建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。<br>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p><hr><p><strong>27、 如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong></p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。<p>MSL(最大报文段生存时间)</p><hr><blockquote>  <h2 id="引用">引用</h2>  <p><a href="https://blog.csdn.net/justloveyou_/article/details/78303617#commentBox?tdsourcetag=s_pcqq_aiomsg" rel="nofollow" target="_blank">面试/笔试 计算机网络</a> <br>  </p><p><a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" rel="nofollow" target="_blank" data-token="9996eaa6b77b7a6472b68689a136eeed">浅谈HTTP中Get与Post的区别</a> <br>  <a href="http://blog.csdn.net/sicofield/article/details/9708383" rel="nofollow" target="_blank" data-token="761b7ffe8737eec4250717ca771bffbd">TCP的拥塞控制</a> <br>  <a href="http://www.cnblogs.com/xuxm2007/archive/2011/12/05/2276705.html/6557596.htmlB%E4%B8%8E%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D.jpg" rel="nofollow" target="_blank" data-token="a2d350739ce1f40e36504b96b55ce597">Session简介</a> <br>  <a href="http://www.cnblogs.com/xdp-gacl/p/3803033.html.jpg" rel="nofollow" target="_blank" data-token="030f0e78a7945fa3d4a25845fda4b91a">javaweb学习总结(十一)——使用Cookie进行会话管理</a> <br>  <a href="http://www.cnblogs.com/phpstudy2015-6/p/6767032.html#_label1" rel="nofollow" target="_blank" data-token="29b8ea946d4cde54269133dff6f04cf1">XSS跨站脚本攻击</a></p></blockquote>                                    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://picsum.photos/800/202&quot; alt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文对面试/笔试过程中经常会被问到的一些关于计算机网络的问题进行了梳理和总结。关于这块内容的初步了解和掌握，建议大家读一读《图解HTTP》一书。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
    
      <category term="计算机网络" scheme="ayjcsgm.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>SQL语句测试题带答案</title>
    <link href="ayjcsgm.github.io/2019/10/01/SQL%E8%AF%AD%E5%8F%A5%E6%B5%8B%E8%AF%95%E9%A2%98%E5%B8%A6%E7%AD%94%E6%A1%88/"/>
    <id>ayjcsgm.github.io/2019/10/01/SQL语句测试题带答案/</id>
    <published>2019-10-01T07:15:44.000Z</published>
    <updated>2019-10-01T08:15:36.579Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picsum.photos/800/201" alt><br>Student(SId,Sname,Sage,Ssex) 学生表       SId：学号；Sname：学生姓名；Sage：学生年龄；Ssex：学生性别<br>Course(CId,Cname,TId) 课程表                    CId,课程编号；Cname：课程名字；TId：教师编号<br>SC(SId,CId,score) 成绩表                             SId：学号；CId,课程编号；score：成绩<br>Teacher(TId,Tname) 教师表                        TId：教师编号； Tname：教师名字</p><a id="more"></a> <p>问题：<br>1、查询“001”课程比“002”课程成绩高的所有学生的学号；<br>  select a.SId from (select sId,score from SC where CId=’001’) a,(select sId,score<br>  from SC where CId=’002’) b<br>  where a.score&gt;b.score and a.sId=b.sId;<br>2、查询平均成绩大于60分的同学的学号和平均成绩；<br>    select SId,avg(score)<br>    from sc<br>    group by SId having avg(score) &gt;60;<br>3、查询所有同学的学号、姓名、选课数、总成绩；<br>  select Student.SId,Student.Sname,count(SC.CId),sum(score)<br>  from Student left Outer join SC on Student.SId=SC.SId<br>  group by Student.SId,Sname<br>4、查询姓“李”的老师的个数；<br>  select count(distinct(Tname))<br>  from Teacher<br>  where Tname like ‘李%’;<br>5、查询没学过“叶平”老师课的同学的学号、姓名；<br>    select Student.SId,Student.Sname<br>    from Student<br>    where SId not in (select distinct( SC.SId) from SC,Course,Teacher where  SC.CId=Course.CId and Teacher.TId=Course.TId and Teacher.Tname=’叶平’);<br>6、查询学过“001”并且也学过编号“002”课程的同学的学号、姓名；<br>  select Student.SId,Student.Sname from Student,SC where Student.SId=SC.SId and SC.CId=’001’and exists( Select * from SC as SC_2 where SC_2.SId=SC.SId and SC_2.CId=’002’);<br>7、查询学过“叶平”老师所教的所有课的同学的学号、姓名；<br>  select SId,Sname<br>  from Student<br>  where SId in (select SId from SC ,Course ,Teacher where SC.CId=Course.CId and Teacher.TId=Course.TId and Teacher.Tname=’叶平’ group by SId having count(SC.CId)=(select count(CId) from Course,Teacher  where Teacher.TId=Course.TId and Tname=’叶平’));<br>8、查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名；<br>  Select SId,Sname from (select Student.SId,Student.Sname,score ,(select score from SC SC_2 where SC_2.SId=Student.SId and SC_2.CId=’002’) score2<br>  from Student,SC where Student.SId=SC.SId and CId=’001’) S_2 where score2 &lt;score;<br>9、查询所有课程成绩小于60分的同学的学号、姓名；<br>  select SId,Sname<br>  from Student<br>  where SId not in (select Student.SId from Student,SC where S.SId=SC.SId and score&gt;60);<br>10、查询没有学全所有课的同学的学号、姓名；<br>    select Student.SId,Student.Sname<br>    from Student,SC<br>    where Student.SId=SC.SId group by  Student.SId,Student.Sname having count(CId) &lt;(select count(CId) from Course);</p><p>11、查询至少有一门课与学号为“1001”的同学所学相同的同学的学号和姓名；<br>    select SId,Sname from Student,SC where Student.SId=SC.SId and CId in select CId from SC where SId=’1001’;<br>12、查询至少学过学号为“001”同学所有一门课的其他同学学号和姓名；<br>    select distinct SC.SId,Sname<br>    from Student,SC<br>    where Student.SId=SC.SId and CId in (select CId from SC where SId=’001’);<br>13、把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩；<br>    update SC set score=(select avg(SC_2.score)<br>    from SC SC_2<br>    where SC_2.CId=SC.CId ) from Course,Teacher where Course.CId=SC.CId and Course.TId=Teacher.TId and Teacher.Tname=’叶平’);<br>14、查询和“1002”号的同学学习的课程完全相同的其他同学学号和姓名；<br>    select SId from SC where CId in (select CId from SC where SId=’1002’)<br>    group by SId having count(<em>)=(select count(</em>) from SC where SId=’1002’);<br>15、删除学习“叶平”老师课的SC表记录；<br>    Delect SC<br>    from course ,Teacher<br>    where Course.CId=SC.CId and Course.TId= Teacher.TId and Tname=’叶平’;<br>16、向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“003”课程的同学学号、2、<br>    号课的平均成绩；<br>    Insert SC select SId,’002’,(Select avg(score)<br>from SC where CId=’002’) from Student where SId not in (Select SId from SC where CId=’002’);<br> 17、按平均成绩从高到低显示所有学生的“数据库”、“企业管理”、“英语”三门的课程成绩，按如下形式显示： 学生ID,,数据库,企业管理,英语,有效课程数,有效平均分<br>    SELECT SId as 学生ID<br>        ,(SELECT score FROM SC WHERE SC.SId=t.SId AND CId=’004’) AS 数据库<br>        ,(SELECT score FROM SC WHERE SC.SId=t.SId AND CId=’001’) AS 企业管理<br>        ,(SELECT score FROM SC WHERE SC.SId=t.SId AND CId=’006’) AS 英语<br>        ,COUNT(<em>) AS 有效课程数, AVG(t.score) AS 平均成绩<br>    FROM SC AS t<br>    GROUP BY SId<br>    ORDER BY avg(t.score)<br>18、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分<br>    SELECT L.CId As 课程ID,L.score AS 最高分,R.score AS 最低分<br>    FROM SC L ,SC AS R<br>    WHERE L.CId = R.CId and<br>        L.score = (SELECT MAX(IL.score)<br>                      FROM SC AS IL,Student AS IM<br>                      WHERE L.CId = IL.CId and IM.SId=IL.SId<br>                      GROUP BY IL.CId)<br>        AND<br>        R.Score = (SELECT MIN(IR.score)<br>                      FROM SC AS IR<br>                      WHERE R.CId = IR.CId<br>                  GROUP BY IR.CId<br>                    );<br>19、按各科平均成绩从低到高和及格率的百分数从高到低顺序<br>    SELECT t.CId AS 课程号,max(course.Cname)AS 课程名,isnull(AVG(score),0) AS 平均成绩<br>        ,100 * SUM(CASE WHEN  isnull(score,0)&gt;=60 THEN 1 ELSE 0 END)/COUNT(</em>) AS 及格百分数<br>    FROM SC T,Course<br>    where t.CId=course.CId<br>    GROUP BY t.CId<br>    ORDER BY 100 * SUM(CASE WHEN  isnull(score,0)&gt;=60 THEN 1 ELSE 0 END)/COUNT(*) DESC<br>20、查询如下课程平均成绩和及格率的百分数(用”1行”显示): 企业管理（001），马克思（002），OO&amp;UML （003），数据库（004）<br>    SELECT SUM(CASE WHEN CId =’001’ THEN score ELSE 0 END)/SUM(CASE CId WHEN ‘001’ THEN 1 ELSE 0 END) AS 企业管理平均分<br>        ,100 * SUM(CASE WHEN CId = ‘001’ AND score &gt;= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN CId = ‘001’ THEN 1 ELSE 0 END) AS 企业管理及格百分数<br>,SUM(CASE WHEN CId = ‘002’ THEN score ELSE 0 END)/SUM(CASE CId WHEN ‘002’ THEN 1 ELSE 0 END) AS 马克思平均分<br>        ,100 * SUM(CASE WHEN CId = ‘002’ AND score &gt;= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN CId = ‘002’ THEN 1 ELSE 0 END) AS 马克思及格百分数<br>        ,SUM(CASE WHEN CId = ‘003’ THEN score ELSE 0 END)/SUM(CASE CId WHEN ‘003’ THEN 1 ELSE 0 END) AS UML平均分<br>        ,100 * SUM(CASE WHEN CId = ‘003’ AND score &gt;= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN CId = ‘003’ THEN 1 ELSE 0 END) AS UML及格百分数<br>        ,SUM(CASE WHEN CId = ‘004’ THEN score ELSE 0 END)/SUM(CASE CId WHEN ‘004’ THEN 1 ELSE 0 END) AS 数据库平均分<br>        ,100 * SUM(CASE WHEN CId = ‘004’ AND score &gt;= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN CId = ‘004’ THEN 1 ELSE 0 END) AS 数据库及格百分数<br>  FROM SC<br>21、查询不同老师所教不同课程平均分从高到低显示<br>  SELECT max(Z.TId) AS 教师ID,MAX(Z.Tname) AS 教师姓名,C.CId AS 课程ＩＤ,MAX(C.Cname) AS 课程名称,AVG(Score) AS 平均成绩<br>    FROM SC AS T,Course AS C ,Teacher AS Z<br>    where T.CId=C.CId and C.TId=Z.TId<br>  GROUP BY C.CId<br>  ORDER BY AVG(Score) DESC<br>22、查询如下课程成绩第 3 名到第 6 名的学生成绩单：企业管理（001），马克思（002），UML （003），数据库（004）<br>    [学生ID],[学生姓名],企业管理,马克思,UML,数据库,平均成绩<br>    SELECT  DISTINCT top 3<br>      SC.SId As 学生学号,<br>        Student.Sname AS 学生姓名 ,<br>      T1.score AS 企业管理,<br>      T2.score AS 马克思,<br>      T3.score AS UML,<br>      T4.score AS 数据库,<br>      ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) as 总分<br>      FROM Student,SC  LEFT JOIN SC AS T1<br>                      ON SC.SId = T1.SId AND T1.CId = ‘001’<br>            LEFT JOIN SC AS T2<br>                      ON SC.SId = T2.SId AND T2.CId = ‘002’<br>            LEFT JOIN SC AS T3<br>ON SC.SId = T3.SId AND T3.CId = ‘003’<br>            LEFT JOIN SC AS T4<br>                      ON SC.SId = T4.SId AND T4.CId = ‘004’<br>      WHERE student.SId=SC.SId and<br>      ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0)<br>      NOT IN<br>      (SELECT<br>            DISTINCT<br>            TOP 15 WITH TIES<br>            ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0)<br>      FROM sc<br>            LEFT JOIN sc AS T1<br>                      ON sc.SId = T1.SId AND T1.CId = ‘k1’<br>            LEFT JOIN sc AS T2<br>                      ON sc.SId = T2.SId AND T2.CId = ‘k2’<br>            LEFT JOIN sc AS T3<br>                      ON sc.SId = T3.SId AND T3.CId = ‘k3’<br>            LEFT JOIN sc AS T4<br>                      ON sc.SId = T4.SId AND T4.CId = ‘k4’<br>      ORDER BY ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) DESC); </p><p>23、统计列印各科成绩,各分数段人数:课程ID,课程名称,[100-85],[85-70],[70-60],[ &lt;60]<br>    SELECT SC.CId as 课程ID, Cname as 课程名称<br>        ,SUM(CASE WHEN score BETWEEN 85 AND 100 THEN 1 ELSE 0 END) AS [100 - 85]<br>        ,SUM(CASE WHEN score BETWEEN 70 AND 85 THEN 1 ELSE 0 END) AS [85 - 70]<br>        ,SUM(CASE WHEN score BETWEEN 60 AND 70 THEN 1 ELSE 0 END) AS [70 - 60]<br>        ,SUM(CASE WHEN score &lt; 60 THEN 1 ELSE 0 END) AS [60 -]<br>    FROM SC,Course<br>    where SC.CId=Course.CId<br>    GROUP BY SC.CId,Cname; </p><p>24、查询学生平均成绩及其名次<br>      SELECT 1+(SELECT COUNT( distinct 平均成绩)<br>              FROM (SELECT SId,AVG(score) AS 平均成绩<br>                      FROM SC<br>                  GROUP BY SId<br>) AS T1<br>            WHERE 平均成绩 &gt; T2.平均成绩) as 名次,<br>      SId as 学生学号,平均成绩<br>    FROM (SELECT SId,AVG(score) 平均成绩<br>            FROM SC<br>        GROUP BY SId<br>        ) AS T2<br>    ORDER BY 平均成绩 desc; </p><p>25、查询各科成绩前三名的记录:(不考虑成绩并列情况)<br>      SELECT t1.SId as 学生ID,t1.CId as 课程ID,Score as 分数<br>      FROM SC t1<br>      WHERE score IN (SELECT TOP 3 score<br>              FROM SC<br>              WHERE t1.CId= CId<br>            ORDER BY score DESC<br>              )<br>      ORDER BY t1.CId;<br>26、查询每门课程被选修的学生数<br>  select cId,count(SId) from sc group by CId;<br>27、查询出只选修了一门课程的全部学生的学号和姓名<br>  select SC.SId,Student.Sname,count(CId) AS 选课数<br>  from SC ,Student<br>  where SC.SId=Student.SId group by SC.SId ,Student.Sname having count(CId)=1;<br>28、查询男生、女生人数<br>    Select count(Ssex) as 男生人数 from Student group by Ssex having Ssex=’男’;<br>    Select count(Ssex) as 女生人数 from Student group by Ssex having Ssex=’女’；<br>29、查询姓“张”的学生名单<br>    SELECT Sname FROM Student WHERE Sname like ‘张%’;<br>30、查询同名同性学生名单，并统计同名人数<br>  select Sname,count(<em>) from Student group by Sname having  count(</em>)&gt;1;;<br>31、1981年出生的学生名单(注：Student表中Sage列的类型是datetime)<br>    select Sname,  CONVERT(char (11),DATEPART(year,Sage)) as age<br>    from student<br>    where  CONVERT(char(11),DATEPART(year,Sage))=’1981’;<br>32、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列<br>Select CId,Avg(score) from SC group by CId order by Avg(score),CId DESC ;<br>33、查询平均成绩大于85的所有学生的学号、姓名和平均成绩<br>    select Sname,SC.SId ,avg(score)<br>    from Student,SC<br>    where Student.SId=SC.SId group by SC.SId,Sname having    avg(score)&gt;85;<br>34、查询课程名称为“数据库”，且分数低于60的学生姓名和分数<br>    Select Sname,isnull(score,0)<br>    from Student,SC,Course<br>    where SC.SId=Student.SId and SC.CId=Course.CId and  Course.Cname=’数据库’and score &lt;60;<br>35、查询所有学生的选课情况；<br>    SELECT SC.SId,SC.CId,Sname,Cname<br>    FROM SC,Student,Course<br>    where SC.SId=Student.SId and SC.CId=Course.CId ;<br>36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数；<br>    SELECT  distinct student.SId,student.Sname,SC.CId,SC.score<br>    FROM student,Sc<br>    WHERE SC.score&gt;=70 AND SC.SId=student.SId;<br>37、查询不及格的课程，并按课程号从大到小排列<br>    select cId from sc where scor e &lt;60 order by CId ;<br>38、查询课程编号为003且课程成绩在80分以上的学生的学号和姓名；<br>    select SC.SId,Student.Sname from SC,Student where SC.SId=Student.SId and Score&gt;80 and CId=’003’;<br>39、求选了课程的学生人数<br>    select count(<em>) from sc;<br>40、查询选修“叶平”老师所授课程的学生中，成绩最高的学生姓名及其成绩<br>    select Student.Sname,score<br>    from Student,SC,Course C,Teacher<br>    where Student.SId=SC.SId and SC.CId=C.CId and C.TId=Teacher.TId and Teacher.Tname=’叶平’ and SC.score=(select max(score)from SC where CId=C.CId );<br>41、查询各个课程及相应的选修人数<br>    select count(</em>) from sc group by CId;<br>42、查询不同课程成绩相同的学生的学号、课程号、学生成绩<br>  select distinct  A.SId,B.score from SC A  ,SC B where A.Score=B.Score and A.CId &lt;&gt;B.CId ;<br>43、查询每门功成绩最好的前两名<br>    SELECT t1.SId as 学生ID,t1.CId as 课程ID,Score as 分数<br>      FROM SC t1<br>      WHERE score IN (SELECT TOP 2 score<br>              FROM SC<br>              WHERE t1.CId= CId<br>  ORDER BY score DESC<br>              )<br>      ORDER BY t1.CId;<br>44、统计每门课程的学生选修人数（超过10人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，查询结果按人数降序排列，若人数相同，按课程号升序排列<br>    select  CId as 课程号,count(<em>) as 人数<br>    from  sc<br>    group  by  CId<br>    order  by  count(</em>) desc,cId<br>45、检索至少选修两门课程的学生学号<br>    select  SId<br>    from  sc<br>    group  by  sId<br>    having  count(<em>)  &gt;  =  2<br>46、查询全部学生都选修的课程的课程号和课程名<br>    select  CId,Cname<br>    from  Course<br>    where  CId  in  (select  cId  from  sc group  by  cId)<br>47、查询没学过“叶平”老师讲授的任一门课程的学生姓名<br>    select Sname from Student where SId not in (select SId from Course,Teacher,SC where Course.TId=Teacher.TId and SC.CId=course.CId and Tname=’叶平’);<br>48、查询两门以上不及格课程的同学的学号及其平均成绩<br>    select SId,avg(isnull(score,0)) from SC where SId in (select SId from SC where score &lt;60 group by SId having count(</em>)&gt;2)group by SId;<br>49、检索“004”课程分数小于60，按分数降序排列的同学学号<br>    select SId from SC where CId=’004’and score &lt;60 order by score desc;<br>50、删除“002”同学的“001”课程的成绩<br>delete from Sc where SId=’002’and CId=’001’;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://picsum.photos/800/201&quot; alt&gt;&lt;br&gt;Student(SId,Sname,Sage,Ssex) 学生表       SId：学号；Sname：学生姓名；Sage：学生年龄；Ssex：学生性别&lt;br&gt;Course(CId,Cname,TId) 课程表                    CId,课程编号；Cname：课程名字；TId：教师编号&lt;br&gt;SC(SId,CId,score) 成绩表                             SId：学号；CId,课程编号；score：成绩&lt;br&gt;Teacher(TId,Tname) 教师表                        TId：教师编号； Tname：教师名字&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SQL" scheme="ayjcsgm.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot个人博客</title>
    <link href="ayjcsgm.github.io/2019/09/23/my-fisrt-post/"/>
    <id>ayjcsgm.github.io/2019/09/23/my-fisrt-post/</id>
    <published>2019-09-23T06:20:34.960Z</published>
    <updated>2019-10-01T16:06:24.155Z</updated>
    
    <content type="html"><![CDATA[<p>作者：黄秋平<br>GitHub：<a href="https://github.com/AYJCSGM/spring-boot-blog" target="_blank" rel="noopener">https://github.com/AYJCSGM/spring-boot-blog</a></p><p><strong>个人博客功能：</strong></p><p><img src="https://camo.githubusercontent.com/5e0fe789d933a0ed40d5c468a1909f56d1f9fc68/68747470733a2f2f7773322e73696e61696d672e636e2f6c617267652f303036744b665463677931666b376d323768626e346a33316473307963646e702e6a7067" alt></p><a id="more"></a> <p><strong>技术组合：</strong></p><ul><li>后端：Spring Boot + JPA + thymeleaf模板</li><li>数据库：MySQL</li><li>前端UI：Semantic UI框架</li></ul><p><strong>工具与环境：</strong></p><ul><li>IDEA</li><li>Maven 3</li><li>JDK 8</li><li>Axure RP 8</li></ul><p><strong>课程内容模块：</strong></p><ul><li>需求分析与功能规划</li><li>页面设计与开发</li><li>技术框架搭建</li><li>后端管理功能实现</li><li>前端管理功能实现</li></ul><p><strong>你能学得什么？</strong></p><ul><li>基于Spring Boot的完整全栈式的开发套路</li><li>Semantic UI框架的使用</li><li>一套博客系统的源代码与设计</li></ul><h2 id="1、需求与功能"><a href="#1、需求与功能" class="headerlink" title="1、需求与功能"></a>1、需求与功能</h2><h3 id="1-1-用户故事"><a href="#1-1-用户故事" class="headerlink" title="1.1 用户故事"></a>1.1 用户故事</h3><p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p><blockquote><p> 用户故事最好是用户团队编写</p></blockquote><p><strong>用户故事模板</strong>：</p><ul><li>As a (role of user), I want (some feature) so that (some business value).</li><li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li></ul><p><strong>关键点</strong>：角色、功能、商业价值</p><p><strong>举例</strong>：</p><ul><li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li><li>作为公司，可以张贴新工作。</li></ul><p>个人博客系统的用户故事：</p><p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p><ul><li>访客，可以分页查看所有的博客</li><li>访客，可以快速查看博客数最多的6个分类</li><li>访客，可以查看所有的分类</li><li>访客，可以查看某个分类下的博客列表</li><li>访客，可以快速查看标记博客最多的10个标签</li><li>访客，可以查看所有的标签</li><li>访客，可以查看某个标签下的博客列表</li><li>访客，可以根据年度时间线查看博客列表</li><li>访客，可以快速查看最新的推荐博客</li><li>访客，可以用关键字全局搜索博客</li><li>访客，可以查看单个博客内容</li><li>访客，可以对博客内容进行评论</li><li>访客，可以赞赏博客内容</li><li>访客，可以微信扫码阅读博客内容</li><li>访客，可以在首页扫描公众号二维码关注我</li><li>我，可以用户名和密码登录后台管理</li><li>我，可以管理博客<ul><li>我，可以发布新博客</li><li>我，可以对博客进行分类</li><li>我，可以对博客打标签</li><li>我，可以修改博客</li><li>我，可以删除博客</li><li>我，可以根据标题，分类，标签查询博客</li></ul></li><li>我，可以管理博客分类<ul><li>我，可以新增一个分类</li><li>我，可以修改一个分类</li><li>我，可以删除一个分类</li><li>我，可以根据分类名称查询分类</li></ul></li><li>我，可以管理标签<ul><li>我，可以新增一个标签</li><li>我，可以修改一个标签</li><li>我，可以删除一个标签</li><li>我，可以根据名称查询标签</li></ul></li></ul><h3 id="1-2-功能规划"><a href="#1-2-功能规划" class="headerlink" title="1.2 功能规划"></a>1.2 功能规划</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt></p><h2 id="2、页面设计与开发"><a href="#2、页面设计与开发" class="headerlink" title="2、页面设计与开发"></a>2、页面设计与开发</h2><h3 id="2-1-设计"><a href="#2-1-设计" class="headerlink" title="2.1 设计"></a>2.1 设计</h3><p><strong>页面规划：</strong></p><p>前端展示：首页、详情页、分类、标签、归档、关于我</p><p>后台管理：模板页</p><h3 id="2-2-页面开发"><a href="#2-2-页面开发" class="headerlink" title="2.2 页面开发"></a>2.2 页面开发</h3><p><a href="https://semantic-ui.com/" target="_blank" rel="noopener">Semantic UI官网</a></p><p><a href="http://www.semantic-ui.cn/" target="_blank" rel="noopener">Semantic UI中文官网</a></p><p><a href="https://imcoding.me/blogs/5" target="_blank" rel="noopener">WebStorm下载与破解</a></p><p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank" rel="noopener">背景图片资源</a></p><h3 id="2-3-插件集成"><a href="#2-3-插件集成" class="headerlink" title="2.3 插件集成"></a>2.3 插件集成</h3><p><a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener">编辑器 Markdown</a></p><p><a href="https://github.com/sofish/typo.css" target="_blank" rel="noopener">内容排版 typo.css</a></p><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">动画 animate.css</a></p><p><a href="https://github.com/PrismJS/prism" target="_blank" rel="noopener">代码高亮 prism</a></p><p><a href="https://tscanlin.github.io/tocbot/" target="_blank" rel="noopener">目录生成 Tocbot</a></p><p><a href="http://imakewebthings.com/waypoints/" target="_blank" rel="noopener">滚动侦测 waypoints</a></p><p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank" rel="noopener">平滑滚动 jquery.scrollTo</a></p><p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank" rel="noopener">二维码生成 qrcode.js</a></p><h2 id="3、框架搭建"><a href="#3、框架搭建" class="headerlink" title="3、框架搭建"></a>3、框架搭建</h2><blockquote><p> <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IDEA下载 https://www.jetbrains.com/idea/</a></p></blockquote><h3 id="3-1-构建与配置"><a href="#3-1-构建与配置" class="headerlink" title="3.1 构建与配置"></a>3.1 构建与配置</h3><p><strong>1、引入Spring Boot模块：</strong></p><ul><li>web</li><li>Thymeleaf</li><li>JPA</li><li>MySQL</li><li>Aspects</li><li>DevTools</li></ul><p><strong>2、application.yml配置</strong></p><ul><li><p>使用 thymeleaf 3</p><p>pom.xml:</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>application.yml:</code></pre><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">HTML</span></span><br></pre></td></tr></table></figure><ul><li>数据库连接配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p>日志配置</p><p>application.yml:</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line"><span class="attr">    root:</span> <span class="string">info</span></span><br><span class="line">    <span class="string">com.imcoding:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">  file:</span> <span class="string">log/imcoding.log</span></span><br></pre></td></tr></table></figure><p>​    logback-spring.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包含Spring boot对logback日志的默认配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"TIME_FILE"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--保留历史日志一个月的时间--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"TIME_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）</span></span><br><span class="line"><span class="comment">    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        my.2017-08-01.0   80MB</span></span><br><span class="line"><span class="comment">        my.2017-08-01.1   10MB</span></span><br><span class="line"><span class="comment">        my.2017-08-02.0   56MB</span></span><br><span class="line"><span class="comment">        my.2017-08-03.0   53MB</span></span><br><span class="line"><span class="comment">        ......</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>生产环境与开发环境配置<ul><li>application-dev.yml</li><li>application-pro.yml</li></ul></li></ul><h3 id="3-2-异常处理"><a href="#3-2-异常处理" class="headerlink" title="3.2 异常处理"></a>3.2 异常处理</h3><p><strong>1、定义错误页面</strong></p><ul><li>404</li><li>500</li><li>error</li></ul><p><strong>2、全局处理异常</strong></p><p>统一处理异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;Exception.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleException</span><span class="params">(HttpServletRequest request, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.error(<span class="string">"Request URL : &#123;&#125; , Exception : &#123;&#125;"</span>, request.getRequestURL(), e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.addObject(<span class="string">"url"</span>, request.getRequestURL());</span><br><span class="line">        mav.addObject(<span class="string">"exception"</span>, e);</span><br><span class="line">        mav.setViewName(<span class="string">"error/error"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误页面异常信息显示处理：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"'&amp;lt;!--'"</span> <span class="attr">th:remove</span>=<span class="string">"tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"'Failed Request URL : ' + $&#123;url&#125;"</span> <span class="attr">th:remove</span>=<span class="string">"tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"'Exception message : ' + $&#123;exception.message&#125;"</span> <span class="attr">th:remove</span>=<span class="string">"tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:remove</span>=<span class="string">"tag"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"st : $&#123;exception.stackTrace&#125;"</span> <span class="attr">th:remove</span>=<span class="string">"tag"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;st&#125;"</span> <span class="attr">th:remove</span>=<span class="string">"tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"'--&amp;gt;'"</span> <span class="attr">th:remove</span>=<span class="string">"tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、资源找不到异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFoundExcepiton</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundExcepiton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundExcepiton</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundExcepiton</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-日志处理"><a href="#3-3-日志处理" class="headerlink" title="3.3 日志处理"></a>3.3 日志处理</h3><p><strong>1、记录日志内容</strong></p><ul><li>请求 url</li><li>访问者 ip</li><li>调用方法 classMethod</li><li>参数 args</li><li>返回内容</li></ul><p><strong>2、记录日志类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.imcoding.web.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + joinPoint.getSignature().getName();</span><br><span class="line">        ReqeustLog reqeustLog = <span class="keyword">new</span> ReqeustLog(</span><br><span class="line">                request.getRequestURL().toString(),</span><br><span class="line">                request.getRemoteAddr(),</span><br><span class="line">                classMethod,</span><br><span class="line">                joinPoint.getArgs()</span><br><span class="line">        );</span><br><span class="line">        logger.info(<span class="string">"Rquest  ----- &#123;&#125;"</span>,reqeustLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//logger.info("---------- doAfter 2 ----------");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(returning = <span class="string">"result"</span>,pointcut = <span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAtfertRturning</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"Return ------ &#123;&#125;"</span>,result );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ReqeustLog</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line">        <span class="keyword">private</span> String ip;</span><br><span class="line">        <span class="keyword">private</span> String classMethod;</span><br><span class="line">        <span class="keyword">private</span> Object[] args;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ReqeustLog</span><span class="params">(String url, String ip, String classMethod, Object[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.url = url;</span><br><span class="line">            <span class="keyword">this</span>.ip = ip;</span><br><span class="line">            <span class="keyword">this</span>.classMethod = classMethod;</span><br><span class="line">            <span class="keyword">this</span>.args = args;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ReqeustLog&#123;"</span> +</span><br><span class="line">                    <span class="string">"url='"</span> + url + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", ip='"</span> + ip + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", classMethod='"</span> + classMethod + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", args="</span> + Arrays.toString(args) +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-页面处理"><a href="#3-4-页面处理" class="headerlink" title="3.4 页面处理"></a>3.4 页面处理</h3><p><strong>1、静态页面导入project</strong></p><p><strong>2、thymeleaf布局</strong></p><ul><li>定义fragment</li><li>使用fragment布局</li></ul><p><strong>3、错误页面美化</strong></p><p>4、设计与规范</p><h3 id="4-1-实体设计"><a href="#4-1-实体设计" class="headerlink" title="4.1 实体设计"></a>4.1 实体设计</h3><p><strong>实体类：</strong></p><ul><li>博客 Blog</li><li>博客分类 Type</li><li>博客标签 Tag</li><li>博客评论 Comment</li><li>用户 User</li></ul><p><strong>实体关系：</strong></p><p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt></p><p><strong>评论类自关联关系：</strong></p><p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt></p><p><strong>Blog类：</strong></p><p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt></p><p><strong>Type类：</strong></p><p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt></p><p><strong>Tag类：</strong></p><p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt></p><p><strong>Comment类：</strong></p><p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt></p><p><strong>User类：</strong></p><p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt></p><h3 id="4-2-应用分层"><a href="#4-2-应用分层" class="headerlink" title="4.2 应用分层"></a>4.2 应用分层</h3><p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt></p><h3 id="4-3-命名约定"><a href="#4-3-命名约定" class="headerlink" title="4.3 命名约定"></a>4.3 命名约定</h3><p><strong>Service/DAO层命名约定：</strong></p><ul><li>获取单个对象的方法用get做前缀。</li><li>获取多个对象的方法用list做前缀。</li><li>获取统计值的方法用count做前缀。</li><li>插入的方法用save(推荐)或insert做前缀。</li><li>删除的方法用remove(推荐)或delete做前缀。</li><li>修改的方法用update做前缀。</li></ul><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt></p><h2 id="5、后台管理功能实现"><a href="#5、后台管理功能实现" class="headerlink" title="5、后台管理功能实现"></a>5、后台管理功能实现</h2><h3 id="5-1-登录"><a href="#5-1-登录" class="headerlink" title="5.1 登录"></a>5.1 登录</h3><p><strong>1、构建登录页面和后台管理首页</strong></p><p><strong>2、UserService和UserRepository</strong></p><p><strong>3、LoginController实现登录</strong></p><p><strong>4、MD5加密</strong></p><p><strong>5、登录拦截器</strong></p><h3 id="5-2-分类管理"><a href="#5-2-分类管理" class="headerlink" title="5.2 分类管理"></a>5.2 分类管理</h3><p><strong>1、分类管理页面</strong></p><p><strong>2、分类列表分页</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"content"</span>:[</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">123</span>,<span class="string">"title"</span>:<span class="string">"blog122"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">122</span>,<span class="string">"title"</span>:<span class="string">"blog121"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">121</span>,<span class="string">"title"</span>:<span class="string">"blog120"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">120</span>,<span class="string">"title"</span>:<span class="string">"blog119"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">119</span>,<span class="string">"title"</span>:<span class="string">"blog118"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">118</span>,<span class="string">"title"</span>:<span class="string">"blog117"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">117</span>,<span class="string">"title"</span>:<span class="string">"blog116"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">116</span>,<span class="string">"title"</span>:<span class="string">"blog115"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">115</span>,<span class="string">"title"</span>:<span class="string">"blog114"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">114</span>,<span class="string">"title"</span>:<span class="string">"blog113"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">113</span>,<span class="string">"title"</span>:<span class="string">"blog112"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">112</span>,<span class="string">"title"</span>:<span class="string">"blog111"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">111</span>,<span class="string">"title"</span>:<span class="string">"blog110"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">110</span>,<span class="string">"title"</span>:<span class="string">"blog109"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">109</span>,<span class="string">"title"</span>:<span class="string">"blog108"</span>,<span class="string">"content"</span>:<span class="string">"this is blog content"</span>&#125;],</span><br><span class="line">  <span class="string">"last"</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="string">"totalPages"</span>:<span class="number">9</span>,</span><br><span class="line">  <span class="string">"totalElements"</span>:<span class="number">123</span>,</span><br><span class="line">  <span class="string">"size"</span>:<span class="number">15</span>,</span><br><span class="line">  <span class="string">"number"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="string">"first"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"sort"</span>:[&#123;</span><br><span class="line">    <span class="string">"direction"</span>:<span class="string">"DESC"</span>,</span><br><span class="line">    <span class="string">"property"</span>:<span class="string">"id"</span>,</span><br><span class="line">    <span class="string">"ignoreCase"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="string">"nullHandling"</span>:<span class="string">"NATIVE"</span>,</span><br><span class="line">    <span class="string">"ascending"</span>:<span class="literal">false</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"numberOfElements"</span>:<span class="number">15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、分类新增、修改、删除</strong></p><h3 id="5-3-标签管理"><a href="#5-3-标签管理" class="headerlink" title="5.3 标签管理"></a>5.3 标签管理</h3><h3 id="5-4-博客管理"><a href="#5-4-博客管理" class="headerlink" title="5.4 博客管理"></a>5.4 博客管理</h3><p><strong>1、博客分页查询</strong></p><p><strong>2、博客新增</strong></p><p><strong>3、博客修改</strong></p><p><strong>4、博客删除</strong></p><h2 id="6、前端展示功能实现"><a href="#6、前端展示功能实现" class="headerlink" title="6、前端展示功能实现"></a>6、前端展示功能实现</h2><h3 id="6-1-首页展示"><a href="#6-1-首页展示" class="headerlink" title="6.1 首页展示"></a>6.1 首页展示</h3><p><strong>1、博客列表</strong></p><p><strong>2、top分类</strong></p><p><strong>3、top标签</strong></p><p><strong>4、最新博客推荐</strong></p><p><strong>5、博客详情</strong></p><p><strong>1、Markdown 转换 HTML</strong></p><ul><li><a href="https://github.com/atlassian/commonmark-java" target="_blank" rel="noopener">commonmark-java  https://github.com/atlassian/commonmark-java</a></li><li>pom.xml引用commonmark和扩展插件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonmark<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonmark-ext-heading-anchor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonmark-ext-gfm-tables<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、评论功能</strong></p><ul><li>评论信息提交与回复功能</li><li>评论信息列表展示功能</li><li>管理员回复评论功能</li></ul><h3 id="6-2-分类页"><a href="#6-2-分类页" class="headerlink" title="6.2 分类页"></a>6.2 分类页</h3><h3 id="6-3-标签页"><a href="#6-3-标签页" class="headerlink" title="6.3 标签页"></a>6.3 标签页</h3><h3 id="6-4-归档页"><a href="#6-4-归档页" class="headerlink" title="6.4 归档页"></a>6.4 归档页</h3><h3 id="6-5-关于我"><a href="#6-5-关于我" class="headerlink" title="6.5 关于我"></a>6.5 关于我</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：黄秋平&lt;br&gt;GitHub：&lt;a href=&quot;https://github.com/AYJCSGM/spring-boot-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/AYJCSGM/spring-boot-blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人博客功能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5e0fe789d933a0ed40d5c468a1909f56d1f9fc68/68747470733a2f2f7773322e73696e61696d672e636e2f6c617267652f303036744b665463677931666b376d323768626e346a33316473307963646e702e6a7067&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Spring Boot" scheme="ayjcsgm.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="ayjcsgm.github.io/2019/09/23/hello-world/"/>
    <id>ayjcsgm.github.io/2019/09/23/hello-world/</id>
    <published>2019-09-23T06:06:49.578Z</published>
    <updated>2019-10-01T16:08:31.895Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picsum.photos/800/200" alt></p><p></p><p>　　我听说，有一种猫叫做雨猫。天气温暖时，它就变得蓬松毛绒绒的，像白云一样上浮，你可以拴着它，像放风筝一样走，它会变透明，阳光透得过它的身体。天气晦暗时它会变黑，坠在地上，满地乱跑，毛变得硬硬的，像刚刮过的胡茬一样。你得抱着它，等天气晴朗时，再把它放出去，就像风筝末梢放着一团棉花糖。</p><hr><p><a id="more"></a> 　　我听说，有种青蛙，透明洁白，只吃茶叶。吃多之后，吐气如兰。冬天它便僵卧，张着大嘴，眠去一个季节。你往它肚里倒热水，水便成茶，馥郁芳香，可以倒在杯子里喝，香沁肺腑。有个女孩子，手头没有杯子，于是捧起青蛙，嘴对着嘴，把青蛙嘴当茶杯口。结果青蛙醒了，变成一白衣少年：“哪个公主吻了我？”</p><hr><a id="more" target="_blank"></a><p>　　在需要阶段的地方插入该代码语句我听说，有一种驯鹿，很爱长颈鹿的斑纹和气味，但是太矮，又碍于长颈鹿是哑巴，所以没法谈恋爱。于是它们就长起了杉树一样直拔云天的角，然后到处找一个人，在角的顶端造一个房子住着。每天，那个人负责在高树摘果子，送给长颈鹿吃，以促成驯鹿和长颈鹿的爱情——虽然见不到面，但灵魂相通的爱情。</p><hr><p>　　我听说，北方有一种松鼠，特别大，毛茸茸的，睡觉时喜欢摊开四肢，露出软绵绵的肚皮。你抓住一只，混熟了，就可以把它当床，睡在它的肚子上，用它的尾巴做被子。但它喜欢梦游，到处爬，所以你睡着前眼睛明明看见天花板的花纹，醒来时就可能看见松树枝、杉树枝、云、麻雀和松毛虫。</p><hr><p>　　我听说，有一种猫，特别怕冷，一遇到冷环境就全身长起蓬松松软绵绵的长毛，并且开始冬眠，怎么叫都不醒。冬天你把它挂在脖子上出门，就好像穿了件毛大衣。到了温暖的室内，它暖醒了，就喵一声跳下来，自己到炉子旁边去接着睡了。因为冬天很长，它在冬天基本是裘状，所以叫冬裘夏猫。</p><hr><p>　　我听说，有种野猪，睡一觉就长一层脂肪，起来跑一跑就练出一层肌肉，所以他身上肥瘦肥瘦，像夹心饼干。他爱去南方的海边泡澡，泡一身大粒子盐味，吹风，然后哼唧哼唧去温泉，一边蒸自己一边吃树叶子。你埋伏在温泉边，射倒它，能吃到现成的蒸火腿。你最好带蜂蜜，敷一遍再蒸，更好吃。</p><hr><p>　　我听说，以前有人喜欢在海蚌上写故事写诗。你走在海边，海蚌会跟你说：我身上有字，可以给你看噢，但有个条件，我不识字，你得念给我听。你答应了，海蚌就张开壳来，让你给它念故事。如果你看入神忘了继续念，或者企图摘抄剽窃，海蚌就会夹你一下；如果你念得好，海蚌就送你颗珍珠。</p><hr><p>　　我听说，南方有一种鸟，身材纤瘦，尾羽很长，善吟诗，平时看上去盈盈一握，却筋骨健壮。如果你和它混熟了，它就会把身体绷直，你可以握着它的腰，用它的嘴蘸墨、写字，画梅花、打印章时，还可以用它印个浅爪痕。可是它挑剔得很，墨质差，纸脏，字写得难看，或者句子毫无文采，它就会破口大骂：“居然用老娘写这么烂的文章！”</p><hr><p>我听说有种雪狐，极妩媚，皮毛柔滑。善学声音，爱恶作剧，喜在窗外学男主人女同学、女同事等声音，引女主人疑心吵架，引以为乐。被抓住后会要求：给你雪狐裘，放我走吧。若男主人不允，她便媚笑：原来是你舍不得我走啊嗯……女主人遂朝男主人双目圆睁：你留她干嘛，还不放走？心思又活络了嗯？！</p><hr><p>　　我听说，有种熊叫做云熊，其白如雪，其大若垂天之云。春天开始浮游，夏天吸取阳光。冬天，它随风在天空飘荡，到一个寒冷的地方，就开始下一团团的熊绒毛。熊绒可做大衣，闻得到夏天阳光的味道。熊绒落完，它也就飘下地来。你闻以蜂蜜，冬眠。到春天它长起了毛，就又变成云浮起来了。</p><hr><p>　　我听说有种蜗牛，寿命很长，以八千岁为春，以八千岁为秋。丈夫对妻子说，我要吻你一下，然后出门去买报纸。妻子就闭上眼，等了八天，吻到了，于是丈夫出门了。等他回来，妻子抱怨说：你这一走就是六百年，我好担心。丈夫说：哎呀，我是怕又过时了，站在那里花二百年把新闻看了嘛。</p><hr><p>　　我听说有种章鱼，善于下厨。你坐柜台后面，问它要三明治寿司刺身铁板烧咖啡茶涮锅烤串回锅肉，它舞起手臂们，切剔炒烹翻炸调撒料颠勺，又快又好，还能剩出三只手，一只负责收钱，两只和你打扑克解闷。但它开不起玩笑，偶尔它不小心手臂被铁板烫到，你可不能说“那我要这条章鱼烧！” 不然它就会舞起锅铲，任你是三头六臂也挡不住它四面八方朝你扔鱼丸。</p><hr><p>　　我听说有种虎鲸，很温柔，喜欢光，不潜游，但又怕晒。你在它背上铺沙子，张阳伞，它便喜欢你，任你在它背上住下，钓鱼、睡午觉、接吻、喝果汁。每天它张嘴吞许多小鱼，自己吃些，剩下的喷水送给你，于是你天天有新鲜刺身吃。偶然它也馋，愿意吃熟的，就会张嘴，要你抛给吃章鱼烧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://picsum.photos/800/200&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;　　我听说，有一种猫叫做雨猫。天气温暖时，它就变得蓬松毛绒绒的，像白云一样上浮，你可以拴着它，像放风筝一样走，它会变透明，阳光透得过它的身体。天气晦暗时它会变黑，坠在地上，满地乱跑，毛变得硬硬的，像刚刮过的胡茬一样。你得抱着它，等天气晴朗时，再把它放出去，就像风筝末梢放着一团棉花糖。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
